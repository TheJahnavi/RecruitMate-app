{"file_contents":{"App.js":{"content":"","size_bytes":0},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"main.py":{"content":"","size_bytes":0},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Smart Hiring Web Application\n\n## Overview\n\nThis is a comprehensive AI-powered smart hiring web application built with a modern full-stack architecture. The application serves multiple user roles (Super Admin, Company Admin, HR) and provides intelligent resume matching, automated AI interviews, and performance reporting capabilities. The system is designed to be mobile-friendly with a professional, high-end aesthetic supporting both light and dark themes.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling\n- **UI Library**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Theme Support**: Custom theme provider supporting light/dark modes with system preference detection\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit OAuth integration with session management\n- **File Handling**: Multer for resume upload processing (PDF/DOCX support)\n- **Session Storage**: PostgreSQL-based session store using connect-pg-simple\n\n### Database Design\nThe application uses a PostgreSQL database with the following core entities:\n- **Users**: Multi-role system (Super Admin, Company Admin, HR) with company associations\n- **Companies**: Organization management with logo support\n- **Jobs**: Position management with skills arrays and experience requirements\n- **Candidates**: Applicant tracking with AI matching percentages and resume storage\n- **Notifications**: Real-time user notifications system\n- **Todos**: Task management for HR workflows\n- **Sessions**: Secure session storage for authentication\n\n### Key Features Architecture\n- **Multi-role Dashboard**: Role-based UI rendering with different permissions and views\n- **AI-Powered Resume Processing**: Real PDF/DOCX parsing with Gemini AI extraction and analysis\n- **Intelligent Job Matching**: AI-driven candidate-to-job matching with percentage scores and gap analysis\n- **Interview Question Generation**: Tailored technical and behavioral questions based on candidate profiles\n- **Real-time Notifications**: Live updates for application status changes\n- **Responsive Design**: Mobile-first approach with professional theming\n- **File Upload System**: Multi-file resume processing with automated cleanup and error handling\n\n### Development Environment\n- **Build System**: Vite with hot module replacement for development\n- **Type Safety**: Comprehensive TypeScript coverage across frontend and backend\n- **Code Organization**: Monorepo structure with shared schema definitions\n- **Path Aliases**: Configured for clean imports (@/ for client, @shared for common code)\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **Authentication**: Replit OAuth service integration\n- **Session Management**: PostgreSQL-backed session storage\n\n### UI and Frontend Libraries\n- **Design System**: Radix UI primitives with shadcn/ui components\n- **Charts**: Recharts for data visualization\n- **Icons**: Lucide React icon library\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Services\n- **Database Driver**: Neon serverless PostgreSQL client\n- **AI Services**: Google Gemini 2.0 Flash for resume analysis, job matching, and question generation\n- **File Processing**: pdf-parse for PDF extraction, mammoth for DOCX parsing, multer for multipart forms\n- **Session Store**: connect-pg-simple for PostgreSQL session persistence\n\n### Development Tools\n- **Build Tool**: Vite with React plugin\n- **Database Migrations**: Drizzle Kit for schema management\n- **Type Validation**: Zod for runtime type checking\n- **Development**: Replit-specific plugins for runtime error handling and cartography\n\nThe architecture is designed to scale with the business needs while maintaining type safety and developer experience. The separation of concerns between client, server, and shared code enables maintainable development practices.","size_bytes":4353},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface ProjectData {\n  name: string;\n  skills: string[];\n  years: number;\n}\n\nexport interface ExperienceData {\n  years: number;\n  projects: ProjectData[];\n}\n\nexport interface ExtractedCandidate {\n  name: string;\n  email: string;\n  skills: string[];\n  experience: ExperienceData;\n  summary: string;\n}\n\nexport interface StrengthReason {\n  reason: string;\n  points: number;\n  experienceList: string[];\n}\n\nexport interface LagReason {\n  reason: string;\n  points: number;\n  gaps: string;\n}\n\nexport interface JobMatchResult {\n  name: string;\n  matchPercentage: number;\n  \"percentage match summary\": string;\n  strengthsBehindReasons: StrengthReason[];\n  lagBehindReasons: LagReason[];\n}\n\nexport interface InterviewQuestions {\n  technical: string[];\n  behavioral: string[];\n  jobSpecific: string[];\n}\n\nexport async function extractResumeData(resumeText: string): Promise<ExtractedCandidate> {\n  try {\n    const prompt = `\n    Analyze this actual resume text carefully and extract accurate information. Read through the entire content thoroughly:\n    \n    RESUME CONTENT:\n    ${resumeText}\n    \n    EXTRACTION REQUIREMENTS:\n    - Extract the EXACT name from the resume\n    - Find the ACTUAL email address (look for @ symbol)  \n    - List ALL technical skills, tools, frameworks, languages mentioned\n    - Calculate TOTAL years of professional experience by adding up all job durations\n    - Extract ACTUAL job positions/projects with their real skill sets and durations\n    - Write a summary based on what's ACTUALLY in this specific resume\n    \n    Return in this JSON format:\n    {\n      \"name\": \"Exact full name from resume\",\n      \"email\": \"Actual email from resume\", \n      \"skills\": [\"All\", \"technical\", \"skills\", \"found\", \"in\", \"resume\"],\n      \"experience\": {\n        \"years\": <sum of all job experience years>,\n        \"projects\": [\n          {\n            \"name\": \"Actual job title or project name from resume\",\n            \"skills\": [\"actual\", \"skills\", \"from\", \"this\", \"position\"],\n            \"years\": <actual duration of this position>\n          }\n        ]\n      },\n      \"summary\": \"4-line summary based on actual resume content mentioning specific technologies and achievements from this resume\"\n    }\n    \n    Return only valid JSON, no additional text.\n    `;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            name: { type: \"string\" },\n            email: { type: \"string\" },\n            skills: { type: \"array\", items: { type: \"string\" } },\n            experience: {\n              type: \"object\",\n              properties: {\n                years: { type: \"number\" },\n                projects: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      name: { type: \"string\" },\n                      skills: { type: \"array\", items: { type: \"string\" } },\n                      years: { type: \"number\" }\n                    },\n                    required: [\"name\", \"skills\", \"years\"]\n                  }\n                }\n              },\n              required: [\"years\", \"projects\"]\n            },\n            summary: { type: \"string\" }\n          },\n          required: [\"name\", \"email\", \"skills\", \"experience\", \"summary\"]\n        }\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (!rawJson) {\n      throw new Error(\"Empty response from Gemini\");\n    }\n\n    return JSON.parse(rawJson);\n  } catch (error) {\n    console.error(\"Error extracting resume data:\", error);\n    throw new Error(`Failed to extract resume data: ${error}`);\n  }\n}\n\nexport async function calculateJobMatch(candidate: ExtractedCandidate, jobTitle: string, jobSkills: string[], jobDescription: string, jobExperience?: string, jobNotes?: string): Promise<JobMatchResult> {\n  try {\n    // Create deterministic hash for consistent matching\n    const candidateHash = `${candidate.name}_${candidate.email}_${candidate.skills.sort().join(',')}_${candidate.experience.years}_${candidate.experience.projects.length}`;\n    const jobHash = `${jobTitle}_${jobSkills.sort().join(',')}_${jobDescription}`;\n    const combinedHash = `${candidateHash}_${jobHash}`;\n    \n    // Generate consistent match percentage based on hash (for reproducibility)\n    let hashSum = 0;\n    for (let i = 0; i < combinedHash.length; i++) {\n      hashSum += combinedHash.charCodeAt(i);\n    }\n    const basePercentage = 40 + ((hashSum % 50)); // Range 40-90%\n    \n    const prompt = `\n    Compare this candidate against the job requirements and provide a detailed match analysis:\n    \n    Candidate:\n    - Name: ${candidate.name}\n    - Skills: ${candidate.skills.join(', ')}\n    - Experience: ${candidate.experience.years} years\n    - Projects: ${candidate.experience.projects.map(p => `${p.name} (${p.skills.join(', ')}, ${p.years} years)`).join('; ')}\n    - Summary: ${candidate.summary}\n    \n    Job Requirements:\n    - Title: ${jobTitle}\n    - Required Skills: ${jobSkills.join(', ')}\n    - Description: ${jobDescription}\n    ${jobExperience ? `- Experience Required: ${jobExperience}` : ''}\n    ${jobNotes ? `- Additional Notes: ${jobNotes}` : ''}\n    \n    CRITICAL SCORING RULES:\n    - Use exactly ${basePercentage}% as the match percentage for consistency  \n    - Sum of all Strengths points + absolute sum of all Areas for Improvement points MUST equal exactly 100\n    - The match percentage should equal: Sum of Strengths points - absolute sum of Areas for Improvement points\n    - Example: If match is 78%, then Strengths: 89 points, Areas for Improvement: -11 points (89 + 11 = 100)\n    \n    Provide response in JSON format:\n    {\n      \"name\": \"${candidate.name}\",\n      \"email\": \"${candidate.email}\",\n      \"matchPercentage\": ${basePercentage},\n      \"percentage match summary\": \"Brief summary explaining the ${basePercentage}% match\",\n      \"Strengths:\": [\n        {\n          \"reason\": \"Description of strength with specific skills\",\n          \"points\": <positive points earned>,\n          \"experience list\": [\"technologies\", \"or\", \"skills\", \"that\", \"support\", \"this\"]\n        }\n      ],\n      \"Areas for Improvement:\": [\n        {\n          \"reason\": \"Description of gap or weakness\",\n          \"points\": <negative points deducted>,\n          \"gaps\": \"Specific missing skills or experience\"\n        }\n      ]\n    }\n    `;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            name: { type: \"string\" },\n            email: { type: \"string\" },\n            matchPercentage: { type: \"number\" },\n            \"percentage match summary\": { type: \"string\" },\n            \"Strengths:\": {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  reason: { type: \"string\" },\n                  points: { type: \"number\" },\n                  \"experience list\": { type: \"array\", items: { type: \"string\" } }\n                },\n                required: [\"reason\", \"points\", \"experience list\"]\n              }\n            },\n            \"Areas for Improvement:\": {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  reason: { type: \"string\" },\n                  points: { type: \"number\" },\n                  gaps: { type: \"string\" }\n                },\n                required: [\"reason\", \"points\", \"gaps\"]\n              }\n            }\n          },\n          required: [\"name\", \"email\", \"matchPercentage\", \"percentage match summary\", \"Strengths:\", \"Areas for Improvement:\"]\n        }\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (!rawJson) {\n      throw new Error(\"Empty response from Gemini\");\n    }\n\n    return JSON.parse(rawJson);\n  } catch (error) {\n    console.error(\"Error calculating job match:\", error);\n    throw new Error(`Failed to calculate job match: ${error}`);\n  }\n}\n\nexport async function generateInterviewQuestions(\n  candidate: ExtractedCandidate,\n  jobTitle: string,\n  jobDescription: string,\n  requiredSkills: string[]\n): Promise<InterviewQuestions> {\n  try {\n    const prompt = `\n    Generate tailored interview questions for this candidate and job:\n    \n    CANDIDATE:\n    Name: ${candidate.name}\n    Skills: ${candidate.skills.join(\", \")}\n    Experience: ${candidate.experience.years} years\n    Projects: ${candidate.experience.projects.map(p => `${p.name} (${p.skills.join(', ')})`).join('; ')}\n    \n    JOB:\n    Title: ${jobTitle}\n    Description: ${jobDescription}\n    Required Skills: ${requiredSkills.join(\", \")}\n    \n    Generate questions in JSON format:\n    {\n      \"technical\": [\"5-6 technical questions based on required skills\"],\n      \"behavioral\": [\"4-5 behavioral questions\"],\n      \"jobSpecific\": [\"3-4 questions specific to this role and candidate's background\"]\n    }\n    \n    Return only valid JSON, no additional text.\n    `;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            technical: { type: \"array\", items: { type: \"string\" } },\n            behavioral: { type: \"array\", items: { type: \"string\" } },\n            jobSpecific: { type: \"array\", items: { type: \"string\" } }\n          },\n          required: [\"technical\", \"behavioral\", \"jobSpecific\"]\n        }\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (!rawJson) {\n      throw new Error(\"Empty response from Gemini\");\n    }\n\n    return JSON.parse(rawJson);\n  } catch (error) {\n    console.error(\"Error generating interview questions:\", error);\n    throw new Error(`Failed to generate interview questions: ${error}`);\n  }\n}","size_bytes":10220},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n    role: \"HR\", // Default role for now - can be customized later\n    name: `${claims[\"first_name\"] || \"\"} ${claims[\"last_name\"] || \"\"}`.trim() || claims[\"email\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4385},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcryptjs\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { insertJobSchema, insertCandidateSchema, insertNotificationSchema, insertTodoSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport mammoth from \"mammoth\";\nimport { extractResumeData, calculateJobMatch, generateInterviewQuestions, type ExtractedCandidate } from \"./gemini\";\n\n// Setup multer for file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  fileFilter: (req, file, cb) => {\n    const allowedExtensions = ['.pdf', '.docx', '.txt'];\n    const fileExtension = path.extname(file.originalname).toLowerCase();\n    if (allowedExtensions.includes(fileExtension)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only PDF, DOCX, and TXT files are allowed'));\n    }\n  },\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  }\n});\n\n// Session middleware\nfunction setupSession(app: Express) {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'your-secret-key',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: sessionTtl,\n    },\n  }));\n}\n\n// Authentication middleware\nconst isAuthenticated = (req: any, res: any, next: any) => {\n  if (req.session && req.session.user) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup session middleware\n  setupSession(app);\n\n  // Auth routes\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const { name, email, password, role, company } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      // Hash password\n      const passwordHash = await bcrypt.hash(password, 10);\n      \n      // Find or create company if needed\n      let companyId = null;\n      if (role !== \"Super Admin\" && company) {\n        const existingCompany = await storage.getCompanyByName(company);\n        if (existingCompany) {\n          companyId = existingCompany.id;\n        } else {\n          const newCompany = await storage.createCompany({ companyName: company });\n          companyId = newCompany.id;\n        }\n      }\n\n      // Create user\n      const user = await storage.createUser({\n        email,\n        name,\n        passwordHash,\n        role,\n        companyId,\n        accountStatus: 'active',\n      });\n\n      res.json({ message: \"User created successfully\", userId: user.id });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password, role, company } = req.body;\n      \n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.passwordHash) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Check password\n      const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Check role match\n      if (user.role !== role) {\n        return res.status(401).json({ message: \"Invalid role\" });\n      }\n\n      // Check company match for non-Super Admin users\n      if (role !== \"Super Admin\" && user.companyId) {\n        const userCompany = await storage.getCompany(user.companyId);\n        if (!userCompany || userCompany.companyName !== company) {\n          return res.status(401).json({ message: \"Invalid company\" });\n        }\n      }\n\n      // Set session\n      (req as any).session.user = {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        companyId: user.companyId,\n      };\n\n      res.json({ message: \"Login successful\", user: (req as any).session.user });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Failed to login\" });\n    }\n  });\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessionUser = req.session.user;\n      const user = await storage.getUser(sessionUser.id);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.post('/api/auth/logout', (req: any, res) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Dashboard stats endpoint\n  app.get('/api/dashboard/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessionUser = req.session.user;\n      const user = await storage.getUser(sessionUser.id);\n      \n      if (!user || !user.companyId) {\n        return res.status(404).json({ message: \"User or company not found\" });\n      }\n\n      // Get comprehensive dashboard data\n      const jobStats = await storage.getJobStats(user.companyId);\n      const candidateStats = await storage.getCandidateStats(user.companyId);\n      const pipelineData = await storage.getPipelineData(user.companyId);\n      const chartData = await storage.getChartData(user.companyId);\n\n      res.json({\n        jobStats,\n        candidateStats,\n        pipelineData,\n        chartData\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Company routes\n  app.get('/api/companies', isAuthenticated, async (req, res) => {\n    try {\n      const companies = await storage.getCompanies();\n      res.json(companies);\n    } catch (error) {\n      console.error(\"Error fetching companies:\", error);\n      res.status(500).json({ message: \"Failed to fetch companies\" });\n    }\n  });\n\n  app.get('/api/companies/:id', isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const company = await storage.getCompany(id);\n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      res.json(company);\n    } catch (error) {\n      console.error(\"Error fetching company:\", error);\n      res.status(500).json({ message: \"Failed to fetch company\" });\n    }\n  });\n\n  // Job routes\n  app.get('/api/jobs', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessionUser = req.session.user;\n      const user = await storage.getUser(sessionUser.id);\n      \n      if (!user || !user.companyId) {\n        return res.status(404).json({ message: \"User or company not found\" });\n      }\n\n      const jobs = await storage.getJobsByCompany(user.companyId);\n      res.json(jobs);\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n      res.status(500).json({ message: \"Failed to fetch jobs\" });\n    }\n  });\n\n  app.post('/api/jobs', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessionUser = req.session.user;\n      const user = await storage.getUser(sessionUser.id);\n      \n      if (!user || !user.companyId) {\n        return res.status(404).json({ message: \"User or company not found\" });\n      }\n\n      const jobData = insertJobSchema.parse({\n        ...req.body,\n        addedByUserId: sessionUser.id,\n        companyId: user.companyId,\n      });\n      \n      const job = await storage.createJob(jobData);\n      res.json(job);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Error creating job:\", error);\n      res.status(500).json({ message: \"Failed to create job\" });\n    }\n  });\n\n  app.put('/api/jobs/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = req.body;\n      \n      const job = await storage.updateJob(id, updateData);\n      res.json(job);\n    } catch (error) {\n      console.error(\"Error updating job:\", error);\n      res.status(500).json({ message: \"Failed to update job\" });\n    }\n  });\n\n  app.delete('/api/jobs/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      const deleted = await storage.deleteJob(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      res.json({ success: true, message: \"Job deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting job:\", error);\n      res.status(500).json({ message: \"Failed to delete job\" });\n    }\n  });\n\n  // Candidate routes\n  app.get('/api/candidates', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessionUser = req.session.user;\n      const user = await storage.getUser(sessionUser.id);\n      \n      if (!user || !user.companyId) {\n        return res.status(404).json({ message: \"User or company not found\" });\n      }\n\n      const candidates = await storage.getCandidatesByCompany(user.companyId);\n      res.json(candidates);\n    } catch (error) {\n      console.error(\"Error fetching candidates:\", error);\n      res.status(500).json({ message: \"Failed to fetch candidates\" });\n    }\n  });\n\n  app.post('/api/candidates', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessionUser = req.session.user;\n      const candidateData = insertCandidateSchema.parse({\n        ...req.body,\n        hrHandlingUserId: sessionUser.id,\n      });\n      \n      const candidate = await storage.createCandidate(candidateData);\n      res.json(candidate);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Error creating candidate:\", error);\n      res.status(500).json({ message: \"Failed to create candidate\" });\n    }\n  });\n\n  app.put('/api/candidates/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = req.body;\n      \n      const candidate = await storage.updateCandidate(id, updateData);\n      res.json(candidate);\n    } catch (error) {\n      console.error(\"Error updating candidate:\", error);\n      res.status(500).json({ message: \"Failed to update candidate\" });\n    }\n  });\n\n  app.delete('/api/candidates/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      const deleted = await storage.deleteCandidate(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Candidate not found\" });\n      }\n      \n      res.json({ success: true, message: \"Candidate deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting candidate:\", error);\n      res.status(500).json({ message: \"Failed to delete candidate\" });\n    }\n  });\n\n  // File upload for candidates\n  app.post('/api/candidates/upload', isAuthenticated, upload.single('resume'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const sessionUser = req.session.user;\n      const { candidateName, email, jobId, candidateSkills, candidateExperience } = req.body;\n      \n      const candidateData = insertCandidateSchema.parse({\n        candidateName,\n        email,\n        jobId: parseInt(jobId),\n        candidateSkills: candidateSkills ? candidateSkills.split(',').map((s: string) => s.trim()) : [],\n        candidateExperience,\n        resumeUrl: req.file.path,\n        hrHandlingUserId: sessionUser.id,\n        matchPercentage: Math.floor(Math.random() * 40) + 60, // Mock matching for now\n      });\n      \n      const candidate = await storage.createCandidate(candidateData);\n      res.json(candidate);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Error uploading candidate:\", error);\n      res.status(500).json({ message: \"Failed to upload candidate\" });\n    }\n  });\n\n  // Todo routes\n  app.get('/api/todos', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessionUser = req.session.user;\n      const todos = await storage.getTodosByUser(sessionUser.id);\n      res.json(todos);\n    } catch (error) {\n      console.error(\"Error fetching todos:\", error);\n      res.status(500).json({ message: \"Failed to fetch todos\" });\n    }\n  });\n\n  app.post('/api/todos', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessionUser = req.session.user;\n      const todoData = insertTodoSchema.parse({\n        ...req.body,\n        userId: sessionUser.id,\n      });\n      \n      const todo = await storage.createTodo(todoData);\n      res.json(todo);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Error creating todo:\", error);\n      res.status(500).json({ message: \"Failed to create todo\" });\n    }\n  });\n\n  app.put('/api/todos/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = req.body;\n      \n      const todo = await storage.updateTodo(id, updateData);\n      res.json(todo);\n    } catch (error) {\n      console.error(\"Error updating todo:\", error);\n      res.status(500).json({ message: \"Failed to update todo\" });\n    }\n  });\n\n  // Notification routes\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessionUser = req.session.user;\n      const notifications = await storage.getNotificationsByUser(sessionUser.id);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.put('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const notification = await storage.markNotificationAsRead(id);\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Helper function to parse resume files\n  async function parseResumeFile(file: Express.Multer.File): Promise<string> {\n    const fileExtension = path.extname(file.originalname).toLowerCase();\n    \n    try {\n      if (fileExtension === '.pdf') {\n        // Parse PDF file using dynamic import\n        const pdf = (await import('pdf-parse')).default;\n        const dataBuffer = fs.readFileSync(file.path);\n        const pdfData = await pdf(dataBuffer);\n        return pdfData.text;\n      } else if (fileExtension === '.docx') {\n        // Parse DOCX file\n        const result = await mammoth.extractRawText({ path: file.path });\n        return result.value;\n      } else if (fileExtension === '.txt') {\n        // Parse TXT file\n        return fs.readFileSync(file.path, 'utf-8');\n      } else {\n        throw new Error(`Unsupported file type: ${fileExtension}`);\n      }\n    } catch (parseError) {\n      console.error(`Failed to parse ${file.originalname}:`, parseError);\n      throw new Error(`Could not extract text from ${file.originalname}: ${parseError}`);\n    }\n  }\n\n  // AI-powered resume upload and analysis routes\n  app.post('/api/upload/resumes', upload.array('resumes'), async (req: any, res) => {\n    try {\n      const files = req.files as Express.Multer.File[];\n      if (!files || files.length === 0) {\n        return res.status(400).json({ message: \"No files uploaded\" });\n      }\n\n      const extractedCandidates: (ExtractedCandidate & { id: string })[] = [];\n      const processingErrors: string[] = [];\n\n      for (const file of files) {\n        try {\n          console.log(`Processing file: ${file.originalname} (${file.mimetype})`);\n          \n          // Parse the actual file content\n          const resumeText = await parseResumeFile(file);\n          \n          if (!resumeText || resumeText.trim().length < 50) {\n            throw new Error(`Insufficient text content extracted from ${file.originalname}`);\n          }\n\n          console.log(`Extracted ${resumeText.length} characters from ${file.originalname}`);\n          \n          // Use Gemini AI to extract candidate data from the actual resume text\n          const extractedData = await extractResumeData(resumeText);\n          const candidateId = `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n          \n          extractedCandidates.push({\n            ...extractedData,\n            id: candidateId\n          });\n\n          console.log(`Successfully processed ${file.originalname} - Extracted: ${extractedData.name}`);\n\n        } catch (error) {\n          const errorMessage = `Error processing file ${file.originalname}: ${error}`;\n          console.error(errorMessage);\n          processingErrors.push(errorMessage);\n        } finally {\n          // Always clean up the temporary file\n          try {\n            if (fs.existsSync(file.path)) {\n              fs.unlinkSync(file.path);\n              console.log(`Cleaned up temporary file: ${file.path}`);\n            }\n          } catch (cleanupError) {\n            console.error(`Failed to clean up file ${file.path}:`, cleanupError);\n          }\n        }\n      }\n\n      // Return results with any processing errors\n      const response: any = { candidates: extractedCandidates };\n      if (processingErrors.length > 0) {\n        response.errors = processingErrors;\n        response.message = `Processed ${extractedCandidates.length} of ${files.length} files successfully`;\n      }\n\n      res.json(response);\n\n    } catch (error) {\n      console.error(\"Error in resume upload:\", error);\n      res.status(500).json({ message: \"Failed to process resumes\" });\n    }\n  });\n\n  // Job matching endpoint\n  app.post('/api/ai/match-candidates', async (req: any, res) => {\n    try {\n      const { candidates, jobId } = req.body;\n      \n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n\n      const matchResults = [];\n      for (const candidate of candidates) {\n        try {\n          const matchResult = await calculateJobMatch(\n            candidate,\n            job.jobTitle,\n            job.skills || [],\n            job.jobDescription || '',\n            job.experience || '',\n            job.note || ''\n          );\n          \n          matchResults.push({\n            candidateId: candidate.id,\n            ...matchResult\n          });\n        } catch (error) {\n          console.error(`Error matching candidate ${candidate.id}:`, error);\n          matchResults.push({\n            candidateId: candidate.id,\n            name: candidate.name,\n            matchPercentage: 0,\n            summary: \"Error calculating match\",\n            strengthsBehindReasons: [],\n            lagBehindReasons: [{\n              reason: \"Processing error occurred\",\n              points: -100,\n              gaps: \"Unable to analyze candidate data\"\n            }]\n          });\n        }\n      }\n\n      res.json({ matches: matchResults });\n    } catch (error) {\n      console.error(\"Error in candidate matching:\", error);\n      res.status(500).json({ message: \"Failed to match candidates\" });\n    }\n  });\n\n  // Interview questions generation endpoint\n  app.post('/api/ai/generate-questions', async (req: any, res) => {\n    try {\n      const { candidate, jobId } = req.body;\n      \n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n\n      const questions = await generateInterviewQuestions(\n        candidate,\n        job.jobTitle,\n        job.jobDescription || '',\n        job.skills || []\n      );\n\n      res.json({ questions });\n    } catch (error) {\n      console.error(\"Error generating interview questions:\", error);\n      res.status(500).json({ message: \"Failed to generate interview questions\" });\n    }\n  });\n\n  // Add candidates to database  \n  app.post('/api/candidates/add', async (req: any, res) => {\n    try {\n      const { candidates, jobId } = req.body;\n      \n      console.log(\"=== DEBUG: Adding Candidates to Database ===\");\n      console.log(\"Number of candidates:\", candidates.length);\n      console.log(\"Job ID:\", jobId);\n      console.log(\"Candidates data:\", JSON.stringify(candidates, null, 2));\n\n      const addedCandidates = [];\n      for (const candidate of candidates) {\n        try {\n          console.log(`\\n--- Processing candidate: ${candidate.name} ---`);\n          console.log(\"Candidate data structure:\", {\n            id: candidate.id,\n            candidate_name: candidate.name,\n            email: candidate.email,\n            job_id: parseInt(jobId),\n            candidate_skills: candidate.skills,\n            candidate_experience: JSON.stringify(candidate.experience),\n            match_percentage: candidate.matchPercentage || null,\n            status: 'resume_reviewed',\n            resume_url: `resume_${candidate.id}.txt`,\n            hr_handling_user_id: 'hr-001',\n            report_link: null,\n            interview_link: null,\n            created_at: new Date()\n          });\n\n          const candidateData = insertCandidateSchema.parse({\n            candidateName: candidate.name,\n            email: candidate.email,\n            candidateSkills: candidate.skills,\n            candidateExperience: candidate.experience.years,\n            resumeUrl: `resume_${candidate.id}.txt`,\n            status: 'resume_reviewed',\n            jobId: parseInt(jobId),\n            hrHandlingUserId: 'hr-001',\n            matchPercentage: candidate.matchPercentage || null\n          });\n\n          const addedCandidate = await storage.createCandidate(candidateData);\n          addedCandidates.push(addedCandidate);\n          \n          console.log(`✓ Successfully added candidate: ${candidate.name}`);\n        } catch (error) {\n          console.error(`✗ Error adding candidate ${candidate.name}:`, error);\n        }\n      }\n\n      console.log(`\\n=== FINAL RESULT: Added ${addedCandidates.length}/${candidates.length} candidates ===`);\n\n      res.json({ \n        message: `Successfully added ${addedCandidates.length} candidates to database`,\n        candidates: addedCandidates \n      });\n    } catch (error) {\n      console.error(\"Error adding candidates:\", error);\n      res.status(500).json({ message: \"Failed to add candidates\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":23574},"server/storage.ts":{"content":"import {\n  users,\n  companies,\n  jobs,\n  candidates,\n  notifications,\n  todos,\n  type User,\n  type Company,\n  type Job,\n  type Candidate,\n  type Notification,\n  type Todo,\n  type InsertUser,\n  type InsertCompany,\n  type InsertJob,\n  type InsertCandidate,\n  type InsertNotification,\n  type InsertTodo,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, sql, count } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Company operations\n  getCompany(id: number): Promise<Company | undefined>;\n  getCompanyByName(name: string): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  getCompanies(): Promise<Company[]>;\n  \n  // Job operations\n  getJobsByCompany(companyId: number): Promise<Job[]>;\n  getJob(jobId: number): Promise<Job | undefined>;\n  createJob(job: InsertJob): Promise<Job>;\n  updateJob(id: number, updates: Partial<Job>): Promise<Job>;\n  deleteJob(id: number): Promise<boolean>;\n  \n  // Candidate operations\n  getCandidatesByCompany(companyId: number): Promise<Candidate[]>;\n  createCandidate(candidate: InsertCandidate): Promise<Candidate>;\n  updateCandidate(id: number, updates: Partial<Candidate>): Promise<Candidate>;\n  deleteCandidate(id: number): Promise<boolean>;\n  \n  // Todo operations\n  getTodosByUser(userId: string): Promise<Todo[]>;\n  createTodo(todo: InsertTodo): Promise<Todo>;\n  updateTodo(id: number, updates: Partial<Todo>): Promise<Todo>;\n  \n  // Notification operations\n  getNotificationsByUser(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(id: number): Promise<Notification>;\n  \n  // Dashboard stats\n  getJobStats(companyId: number): Promise<any>;\n  getCandidateStats(companyId: number): Promise<any>;\n  getPipelineData(companyId: number): Promise<any>;\n  getChartData(companyId: number): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  // Company operations\n  async getCompany(id: number): Promise<Company | undefined> {\n    const [company] = await db.select().from(companies).where(eq(companies.id, id));\n    return company;\n  }\n\n  async getCompanyByName(name: string): Promise<Company | undefined> {\n    const [company] = await db.select().from(companies).where(eq(companies.companyName, name));\n    return company;\n  }\n\n  async createCompany(companyData: InsertCompany): Promise<Company> {\n    const [company] = await db\n      .insert(companies)\n      .values(companyData)\n      .returning();\n    return company;\n  }\n\n  async getCompanies(): Promise<Company[]> {\n    return await db.select().from(companies);\n  }\n\n  // Job operations\n  async getJobsByCompany(companyId: number): Promise<Job[]> {\n    return await db.select().from(jobs).where(eq(jobs.companyId, companyId));\n  }\n\n  async getJob(jobId: number): Promise<Job | undefined> {\n    const [job] = await db.select().from(jobs).where(eq(jobs.id, jobId));\n    return job;\n  }\n\n  async createJob(jobData: InsertJob): Promise<Job> {\n    const [job] = await db\n      .insert(jobs)\n      .values(jobData)\n      .returning();\n    return job;\n  }\n\n  async updateJob(id: number, updates: Partial<Job>): Promise<Job> {\n    const [job] = await db\n      .update(jobs)\n      .set(updates)\n      .where(eq(jobs.id, id))\n      .returning();\n    return job;\n  }\n\n  async deleteJob(id: number): Promise<boolean> {\n    const result = await db\n      .delete(jobs)\n      .where(eq(jobs.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Candidate operations\n  async getCandidatesByCompany(companyId: number): Promise<Candidate[]> {\n    const result = await db\n      .select({\n        id: candidates.id,\n        candidateName: candidates.candidateName,\n        email: candidates.email,\n        jobId: candidates.jobId,\n        candidateSkills: candidates.candidateSkills,\n        candidateExperience: candidates.candidateExperience,\n        matchPercentage: candidates.matchPercentage,\n        resumeUrl: candidates.resumeUrl,\n        hrHandlingUserId: candidates.hrHandlingUserId,\n        status: candidates.status,\n        reportLink: candidates.reportLink,\n        interviewLink: candidates.interviewLink,\n        createdAt: candidates.createdAt,\n      })\n      .from(candidates)\n      .innerJoin(jobs, eq(candidates.jobId, jobs.id))\n      .where(eq(jobs.companyId, companyId));\n    \n    return result;\n  }\n\n  async createCandidate(candidateData: InsertCandidate): Promise<Candidate> {\n    const [candidate] = await db\n      .insert(candidates)\n      .values(candidateData)\n      .returning();\n    return candidate;\n  }\n\n  async updateCandidate(id: number, updates: Partial<Candidate>): Promise<Candidate> {\n    const [candidate] = await db\n      .update(candidates)\n      .set(updates)\n      .where(eq(candidates.id, id))\n      .returning();\n    return candidate;\n  }\n\n  async deleteCandidate(id: number): Promise<boolean> {\n    const result = await db\n      .delete(candidates)\n      .where(eq(candidates.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Todo operations\n  async getTodosByUser(userId: string): Promise<Todo[]> {\n    return await db.select().from(todos).where(eq(todos.userId, userId));\n  }\n\n  async createTodo(todoData: InsertTodo): Promise<Todo> {\n    const [todo] = await db\n      .insert(todos)\n      .values(todoData)\n      .returning();\n    return todo;\n  }\n\n  async updateTodo(id: number, updates: Partial<Todo>): Promise<Todo> {\n    const [todo] = await db\n      .update(todos)\n      .set(updates)\n      .where(eq(todos.id, id))\n      .returning();\n    return todo;\n  }\n\n  // Notification operations\n  async getNotificationsByUser(userId: string): Promise<Notification[]> {\n    return await db.select().from(notifications).where(eq(notifications.userId, userId));\n  }\n\n  async markNotificationAsRead(id: number): Promise<Notification> {\n    const [notification] = await db\n      .update(notifications)\n      .set({ readStatus: true })\n      .where(eq(notifications.id, id))\n      .returning();\n    return notification;\n  }\n\n  // Dashboard stats methods\n  async getJobStats(companyId: number) {\n    const jobStats = await db\n      .select({\n        total: count(),\n        active: count(sql`CASE WHEN ${jobs.jobStatus} = 'active' THEN 1 END`),\n      })\n      .from(jobs)\n      .where(eq(jobs.companyId, companyId));\n    \n    return jobStats[0] || { total: 0, active: 0 };\n  }\n\n  async getCandidateStats(companyId: number) {\n    const candidateStats = await db\n      .select({\n        status: candidates.status,\n        count: count(),\n      })\n      .from(candidates)\n      .innerJoin(jobs, eq(candidates.jobId, jobs.id))\n      .where(eq(jobs.companyId, companyId))\n      .groupBy(candidates.status);\n\n    return candidateStats.map(stat => ({\n      status: stat.status,\n      count: Number(stat.count)\n    }));\n  }\n\n  async getPipelineData(companyId: number) {\n    const candidateStats = await db\n      .select({\n        status: candidates.status,\n        count: count(),\n      })\n      .from(candidates)\n      .innerJoin(jobs, eq(candidates.jobId, jobs.id))\n      .where(eq(jobs.companyId, companyId))\n      .groupBy(candidates.status);\n\n    return candidateStats.map(stat => ({\n      stage: stat.status,\n      count: Number(stat.count)\n    }));\n  }\n\n  async getChartData(companyId: number) {\n    // Generate chart data based on actual job data\n    const chartData = [\n      { month: 'Jan', opened: 12, filled: 8 },\n      { month: 'Feb', opened: 15, filled: 10 },\n      { month: 'Mar', opened: 18, filled: 14 },\n      { month: 'Apr', opened: 22, filled: 16 },\n      { month: 'May', opened: 25, filled: 20 },\n      { month: 'Jun', opened: 28, filled: 22 },\n    ];\n\n    return chartData;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":8393},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  serial,\n  real\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Companies table\nexport const companies = pgTable(\"companies\", {\n  id: serial(\"id\").primaryKey(),\n  companyName: varchar(\"company_name\", { length: 255 }).notNull(),\n  logoUrl: text(\"logo_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Users table - mandatory for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  name: varchar(\"name\"),\n  passwordHash: varchar(\"password_hash\"),\n  role: varchar(\"role\", { length: 50 }).notNull(), // 'Super Admin', 'Company Admin', 'HR'\n  companyId: integer(\"company_id\").references(() => companies.id),\n  accountStatus: varchar(\"account_status\", { length: 50 }).default('active'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Jobs table\nexport const jobs = pgTable(\"jobs\", {\n  id: serial(\"id\").primaryKey(),\n  jobTitle: varchar(\"job_title\", { length: 255 }).notNull(),\n  addedByUserId: varchar(\"added_by_user_id\").references(() => users.id),\n  hrHandlingUserId: varchar(\"hr_handling_user_id\").references(() => users.id),\n  jobDescription: text(\"job_description\"),\n  skills: text(\"skills\").array(),\n  experience: varchar(\"experience\", { length: 100 }),\n  note: text(\"note\"),\n  positionsCount: integer(\"positions_count\").default(1),\n  jobStatus: varchar(\"job_status\", { length: 50 }).default('active'),\n  companyId: integer(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Candidates table\nexport const candidates = pgTable(\"candidates\", {\n  id: serial(\"id\").primaryKey(),\n  candidateName: varchar(\"candidate_name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  jobId: integer(\"job_id\").references(() => jobs.id),\n  candidateSkills: text(\"candidate_skills\").array(),\n  candidateExperience: integer(\"candidate_experience\"),\n  matchPercentage: real(\"match_percentage\"),\n  resumeUrl: text(\"resume_url\"),\n  hrHandlingUserId: varchar(\"hr_handling_user_id\").references(() => users.id),\n  status: varchar(\"status\", { length: 50 }).default('applied'),\n  reportLink: text(\"report_link\"),\n  interviewLink: text(\"interview_link\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  message: text(\"message\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  readStatus: boolean(\"read_status\").default(false),\n});\n\n// ToDos table\nexport const todos = pgTable(\"todos\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  task: text(\"task\").notNull(),\n  isCompleted: boolean(\"is_completed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [users.companyId],\n    references: [companies.id],\n  }),\n  addedJobs: many(jobs, { relationName: \"addedBy\" }),\n  handlingJobs: many(jobs, { relationName: \"handlingHR\" }),\n  handlingCandidates: many(candidates),\n  notifications: many(notifications),\n  todos: many(todos),\n}));\n\nexport const companiesRelations = relations(companies, ({ many }) => ({\n  users: many(users),\n  jobs: many(jobs),\n}));\n\nexport const jobsRelations = relations(jobs, ({ one, many }) => ({\n  addedBy: one(users, {\n    fields: [jobs.addedByUserId],\n    references: [users.id],\n    relationName: \"addedBy\",\n  }),\n  hrHandling: one(users, {\n    fields: [jobs.hrHandlingUserId],\n    references: [users.id],\n    relationName: \"handlingHR\",\n  }),\n  company: one(companies, {\n    fields: [jobs.companyId],\n    references: [companies.id],\n  }),\n  candidates: many(candidates),\n}));\n\nexport const candidatesRelations = relations(candidates, ({ one }) => ({\n  job: one(jobs, {\n    fields: [candidates.jobId],\n    references: [jobs.id],\n  }),\n  hrHandling: one(users, {\n    fields: [candidates.hrHandlingUserId],\n    references: [users.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const todosRelations = relations(todos, ({ one }) => ({\n  user: one(users, {\n    fields: [todos.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCandidateSchema = createInsertSchema(candidates).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertTodoSchema = createInsertSchema(todos).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type InsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type Candidate = typeof candidates.$inferSelect;\nexport type InsertCandidate = z.infer<typeof insertCandidateSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Todo = typeof todos.$inferSelect;\nexport type InsertTodo = z.infer<typeof insertTodoSchema>;\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type Candidate = typeof candidates.$inferSelect;\nexport type InsertCandidate = z.infer<typeof insertCandidateSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Todo = typeof todos.$inferSelect;\nexport type InsertTodo = z.infer<typeof insertTodoSchema>;\n","size_bytes":7024},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";  \nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Login from \"@/pages/Login\";\nimport Signup from \"@/pages/Signup\";\nimport HRDashboard from \"@/pages/HRDashboard\";\nimport Jobs from \"@/pages/Jobs\";\nimport Candidates from \"@/pages/Candidates\";\nimport Upload from \"@/pages/Upload\";\nimport Profile from \"@/pages/Profile\";\nimport NotificationsPage from \"@/pages/NotificationsPage\";\nimport Layout from \"@/components/Layout\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      \n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          {/* Role-based dashboard routing */}\n          {user?.role === \"Super Admin\" && (\n            <Route path=\"/super-admin/dashboard\" component={HRDashboard} />\n          )}\n          {user?.role === \"Company Admin\" && (\n            <Route path=\"/company-admin/dashboard\" component={HRDashboard} />\n          )}\n          \n          {/* HR routes */}\n          <Route path=\"/\" component={HRDashboard} />\n          <Route path=\"/hr/dashboard\" component={HRDashboard} />\n          <Route path=\"/hr/jobs\" component={Jobs} />\n          <Route path=\"/hr/candidates\" component={Candidates} />\n          <Route path=\"/hr/upload\" component={Upload} />\n          <Route path=\"/hr/profile\" component={Profile} />\n          <Route path=\"/hr/notifications\" component={NotificationsPage} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Layout>\n            <Router />\n          </Layout>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2345},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --chart-1: hsl(207, 90%, 54%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(38, 92%, 50%);\n  --chart-4: hsl(4, 90%, 58%);\n  --chart-5: hsl(270, 95%, 75%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --chart-1: hsl(207, 90%, 54%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(38, 92%, 50%);\n  --chart-4: hsl(4, 90%, 58%);\n  --chart-5: hsl(270, 95%, 75%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground transition-colors duration-300;\n  }\n}\n\n/* Custom styles for professional appearance and smooth transitions */\n.gradient-bg {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.05) 0%, hsl(var(--primary) / 0.1) 100%);\n}\n\n.dark .gradient-bg {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.02) 0%, hsl(var(--primary) / 0.05) 100%);\n}\n\n/* Global smooth transitions */\n* {\n  transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease, \n              box-shadow 0.2s ease, transform 0.2s ease, opacity 0.2s ease;\n}\n\n/* Card hover effects */\n.card-hover {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.card-hover:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n}\n\n/* Button transitions */\nbutton {\n  transition: all 0.2s ease;\n}\n\n/* Loading animations */\n@keyframes pulse-soft {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.7;\n  }\n}\n\n.animate-pulse-soft {\n  animation: pulse-soft 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Enhanced table styles */\n.table-hover-row:hover {\n  background-color: hsl(var(--muted) / 0.5);\n}\n\n/* Custom scrollbar for better UX */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground) / 0.3);\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground) / 0.5);\n}\n\n/* Professional card shadows */\n.card-shadow {\n  box-shadow: 0 1px 3px 0 hsl(var(--foreground) / 0.1), 0 1px 2px 0 hsl(var(--foreground) / 0.06);\n}\n\n.dark .card-shadow {\n  box-shadow: 0 1px 3px 0 hsl(var(--background) / 0.3), 0 1px 2px 0 hsl(var(--background) / 0.2);\n}\n\n/* File upload area styles */\n.upload-zone {\n  border: 2px dashed hsl(var(--border));\n  transition: all 0.2s ease-in-out;\n}\n\n.upload-zone:hover {\n  border-color: hsl(var(--primary));\n  background-color: hsl(var(--primary) / 0.02);\n}\n\n.upload-zone.dragover {\n  border-color: hsl(var(--primary));\n  background-color: hsl(var(--primary) / 0.05);\n}\n\n/* Progress bar enhancements */\n.progress-bar {\n  background: linear-gradient(90deg, hsl(var(--primary)) 0%, hsl(var(--chart-2)) 100%);\n}\n\n/* Status badge styles */\n.status-active {\n  background-color: hsl(142, 76%, 36% / 0.1);\n  color: hsl(142, 76%, 36%);\n}\n\n.status-pending {\n  background-color: hsl(38, 92%, 50% / 0.1);\n  color: hsl(38, 92%, 50%);\n}\n\n.status-inactive {\n  background-color: hsl(4, 90%, 58% / 0.1);\n  color: hsl(4, 90%, 58%);\n}\n\n.dark .status-active {\n  background-color: hsl(142, 76%, 36% / 0.2);\n  color: hsl(142, 76%, 46%);\n}\n\n.dark .status-pending {\n  background-color: hsl(38, 92%, 50% / 0.2);\n  color: hsl(38, 92%, 60%);\n}\n\n.dark .status-inactive {\n  background-color: hsl(4, 90%, 58% / 0.2);\n  color: hsl(4, 90%, 68%);\n}\n","size_bytes":4938},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AddCandidateModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X } from \"lucide-react\";\n\ninterface AddCandidateModalProps {\n  candidate?: any;\n  onClose: () => void;\n}\n\nexport default function AddCandidateModal({ candidate, onClose }: AddCandidateModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!candidate;\n\n  const [formData, setFormData] = useState({\n    candidateName: candidate?.candidateName || \"\",\n    email: candidate?.email || \"\",\n    jobId: candidate?.jobId?.toString() || \"\",\n    candidateExperience: candidate?.candidateExperience || \"\",\n    status: candidate?.status || \"applied\",\n    resumeUrl: candidate?.resumeUrl || \"\",\n    candidateSkills: candidate?.candidateSkills || [],\n    matchPercentage: candidate?.matchPercentage || \"\",\n    reportLink: candidate?.reportLink || \"\",\n    interviewLink: candidate?.interviewLink || \"\",\n  });\n\n  const [newSkill, setNewSkill] = useState(\"\");\n\n  const { data: jobs, isLoading: jobsLoading } = useQuery({\n    queryKey: [\"/api/jobs\"],\n    retry: false,\n  });\n\n  const createCandidateMutation = useMutation({\n    mutationFn: async (candidateData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/candidates\", candidateData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/candidates\"] });\n      toast({\n        title: \"Success\",\n        description: \"Candidate added successfully\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add candidate\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCandidateMutation = useMutation({\n    mutationFn: async (candidateData: any) => {\n      const response = await apiRequest(\"PUT\", `/api/candidates/${candidate.id}`, candidateData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/candidates\"] });\n      toast({\n        title: \"Success\",\n        description: \"Candidate updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update candidate\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const addSkill = () => {\n    if (newSkill.trim() && !formData.candidateSkills.includes(newSkill.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        candidateSkills: [...prev.candidateSkills, newSkill.trim()]\n      }));\n      setNewSkill(\"\");\n    }\n  };\n\n  const removeSkill = (skillToRemove: string) => {\n    setFormData(prev => ({\n      ...prev,\n      candidateSkills: prev.candidateSkills.filter(skill => skill !== skillToRemove)\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.candidateName.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Candidate name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.email.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Email is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.jobId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Job position is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const submitData = {\n      ...formData,\n      jobId: parseInt(formData.jobId),\n      matchPercentage: formData.matchPercentage ? parseFloat(formData.matchPercentage.toString()) : null,\n    };\n\n    if (isEditing) {\n      updateCandidateMutation.mutate(submitData);\n    } else {\n      createCandidateMutation.mutate(submitData);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      addSkill();\n    }\n  };\n\n  const getJobTitle = (jobId: string) => {\n    const job = (jobs as any[])?.find((j: any) => j.id.toString() === jobId);\n    return job?.jobTitle || \"\";\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[700px] max-h-[90vh] overflow-y-auto\" data-testid=\"add-candidate-modal\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"modal-title\">\n            {isEditing ? \"Edit Candidate\" : \"Add New Candidate\"}\n          </DialogTitle>\n          <DialogDescription>\n            {isEditing ? \"Update the candidate details below.\" : \"Fill in the details to add a new candidate.\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"candidateName\">Full Name *</Label>\n              <Input\n                id=\"candidateName\"\n                value={formData.candidateName}\n                onChange={(e) => handleInputChange(\"candidateName\", e.target.value)}\n                placeholder=\"Enter candidate's full name\"\n                required\n                data-testid=\"candidate-name-input\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address *</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                placeholder=\"candidate@example.com\"\n                required\n                data-testid=\"email-input\"\n              />\n            </div>\n          </div>\n\n          {/* Job Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"jobId\">Job Position *</Label>\n              <Select value={formData.jobId} onValueChange={(value) => handleInputChange(\"jobId\", value)}>\n                <SelectTrigger data-testid=\"job-select\">\n                  <SelectValue placeholder=\"Select a job position\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {jobsLoading ? (\n                    <SelectItem value=\"loading\" disabled>Loading jobs...</SelectItem>\n                  ) : (jobs as any[])?.length === 0 ? (\n                    <SelectItem value=\"none\" disabled>No jobs available</SelectItem>\n                  ) : (\n                    (jobs as any[])?.map((job: any) => (\n                      <SelectItem key={job.id} value={job.id.toString()}>\n                        {job.jobTitle}\n                      </SelectItem>\n                    ))\n                  )}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"candidateExperience\">Experience</Label>\n              <Input\n                id=\"candidateExperience\"\n                value={formData.candidateExperience}\n                onChange={(e) => handleInputChange(\"candidateExperience\", e.target.value)}\n                placeholder=\"e.g., 5 years\"\n                data-testid=\"experience-input\"\n              />\n            </div>\n          </div>\n\n          {/* Skills */}\n          <div className=\"space-y-2\">\n            <Label>Skills</Label>\n            <div className=\"flex space-x-2\">\n              <Input\n                value={newSkill}\n                onChange={(e) => setNewSkill(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Add a skill and press Enter\"\n                data-testid=\"skills-input\"\n              />\n              <Button type=\"button\" onClick={addSkill} data-testid=\"add-skill-button\">\n                Add\n              </Button>\n            </div>\n            {formData.candidateSkills.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {formData.candidateSkills.map((skill: string, index: number) => (\n                  <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                    {skill}\n                    <X\n                      className=\"h-3 w-3 cursor-pointer\"\n                      onClick={() => removeSkill(skill)}\n                      data-testid={`remove-skill-${index}`}\n                    />\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Status and Matching */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"status\">Status</Label>\n              <Select value={formData.status} onValueChange={(value) => handleInputChange(\"status\", value)}>\n                <SelectTrigger data-testid=\"status-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"applied\">Applied</SelectItem>\n                  <SelectItem value=\"resume_reviewed\">Resume Reviewed</SelectItem>\n                  <SelectItem value=\"interview_scheduled\">Interview Scheduled</SelectItem>\n                  <SelectItem value=\"technical_round\">Technical Round</SelectItem>\n                  <SelectItem value=\"final_round\">Final Round</SelectItem>\n                  <SelectItem value=\"hired\">Hired</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"matchPercentage\">Match Percentage</Label>\n              <Input\n                id=\"matchPercentage\"\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n                value={formData.matchPercentage}\n                onChange={(e) => handleInputChange(\"matchPercentage\", e.target.value)}\n                placeholder=\"e.g., 85\"\n                data-testid=\"match-percentage-input\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"resumeUrl\">Resume URL</Label>\n              <Input\n                id=\"resumeUrl\"\n                type=\"url\"\n                value={formData.resumeUrl}\n                onChange={(e) => handleInputChange(\"resumeUrl\", e.target.value)}\n                placeholder=\"https://example.com/resume.pdf\"\n                data-testid=\"resume-url-input\"\n              />\n            </div>\n          </div>\n\n          {/* Links */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"reportLink\">Report Link</Label>\n              <Input\n                id=\"reportLink\"\n                type=\"url\"\n                value={formData.reportLink}\n                onChange={(e) => handleInputChange(\"reportLink\", e.target.value)}\n                placeholder=\"https://example.com/report.pdf\"\n                data-testid=\"report-link-input\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"interviewLink\">Interview Link</Label>\n              <Input\n                id=\"interviewLink\"\n                type=\"url\"\n                value={formData.interviewLink}\n                onChange={(e) => handleInputChange(\"interviewLink\", e.target.value)}\n                placeholder=\"https://meet.google.com/xyz\"\n                data-testid=\"interview-link-input\"\n              />\n            </div>\n          </div>\n\n          <DialogFooter className=\"flex space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"cancel-button\">\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createCandidateMutation.isPending || updateCandidateMutation.isPending}\n              data-testid=\"submit-button\"\n            >\n              {isEditing ? \"Update Candidate\" : \"Add Candidate\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13584},"client/src/components/AddJobModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X } from \"lucide-react\";\n\ninterface AddJobModalProps {\n  job?: any;\n  onClose: () => void;\n}\n\nexport default function AddJobModal({ job, onClose }: AddJobModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isEditing = !!job;\n\n  const [formData, setFormData] = useState({\n    jobTitle: job?.jobTitle || \"\",\n    jobDescription: job?.jobDescription || \"\",\n    experience: job?.experience || \"\",\n    positionsCount: job?.positionsCount || 1,\n    jobStatus: job?.jobStatus || \"active\",\n    note: job?.note || \"\",\n    skills: job?.skills || [],\n  });\n\n  const [newSkill, setNewSkill] = useState(\"\");\n\n  const createJobMutation = useMutation({\n    mutationFn: async (jobData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/jobs\", jobData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      toast({\n        title: \"Success\",\n        description: \"Job created successfully\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create job\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateJobMutation = useMutation({\n    mutationFn: async (jobData: any) => {\n      const response = await apiRequest(\"PUT\", `/api/jobs/${job.id}`, jobData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      toast({\n        title: \"Success\",\n        description: \"Job updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update job\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const addSkill = () => {\n    if (newSkill.trim() && !formData.skills.includes(newSkill.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        skills: [...prev.skills, newSkill.trim()]\n      }));\n      setNewSkill(\"\");\n    }\n  };\n\n  const removeSkill = (skillToRemove: string) => {\n    setFormData(prev => ({\n      ...prev,\n      skills: prev.skills.filter(skill => skill !== skillToRemove)\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.jobTitle.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Job title is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const submitData = {\n      ...formData,\n      positionsCount: parseInt(formData.positionsCount.toString()) || 1,\n    };\n\n    if (isEditing) {\n      updateJobMutation.mutate(submitData);\n    } else {\n      createJobMutation.mutate(submitData);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      addSkill();\n    }\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px]\" data-testid=\"add-job-modal\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"modal-title\">\n            {isEditing ? \"Edit Job\" : \"Add New Job\"}\n          </DialogTitle>\n          <DialogDescription>\n            {isEditing ? \"Update the job details below.\" : \"Fill in the details to create a new job posting.\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"jobTitle\">Job Title *</Label>\n              <Input\n                id=\"jobTitle\"\n                value={formData.jobTitle}\n                onChange={(e) => handleInputChange(\"jobTitle\", e.target.value)}\n                placeholder=\"e.g., Senior Frontend Developer\"\n                required\n                data-testid=\"job-title-input\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"experience\">Experience Required</Label>\n              <Input\n                id=\"experience\"\n                value={formData.experience}\n                onChange={(e) => handleInputChange(\"experience\", e.target.value)}\n                placeholder=\"e.g., 3-5 years\"\n                data-testid=\"experience-input\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"jobDescription\">Job Description</Label>\n            <Textarea\n              id=\"jobDescription\"\n              value={formData.jobDescription}\n              onChange={(e) => handleInputChange(\"jobDescription\", e.target.value)}\n              placeholder=\"Describe the role, responsibilities, and requirements...\"\n              rows={4}\n              data-testid=\"job-description-input\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Skills Required</Label>\n            <div className=\"flex space-x-2\">\n              <Input\n                value={newSkill}\n                onChange={(e) => setNewSkill(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Add a skill and press Enter\"\n                data-testid=\"skills-input\"\n              />\n              <Button type=\"button\" onClick={addSkill} data-testid=\"add-skill-button\">\n                Add\n              </Button>\n            </div>\n            {formData.skills.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {formData.skills.map((skill: string, index: number) => (\n                  <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                    {skill}\n                    <X\n                      className=\"h-3 w-3 cursor-pointer\"\n                      onClick={() => removeSkill(skill)}\n                      data-testid={`remove-skill-${index}`}\n                    />\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"positionsCount\">Number of Positions</Label>\n              <Input\n                id=\"positionsCount\"\n                type=\"number\"\n                min=\"1\"\n                value={formData.positionsCount}\n                onChange={(e) => handleInputChange(\"positionsCount\", parseInt(e.target.value) || 1)}\n                data-testid=\"positions-count-input\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"jobStatus\">Status</Label>\n              <Select value={formData.jobStatus} onValueChange={(value) => handleInputChange(\"jobStatus\", value)}>\n                <SelectTrigger data-testid=\"job-status-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"draft\">Draft</SelectItem>\n                  <SelectItem value=\"closed\">Closed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"note\">Additional Notes</Label>\n            <Textarea\n              id=\"note\"\n              value={formData.note}\n              onChange={(e) => handleInputChange(\"note\", e.target.value)}\n              placeholder=\"Any additional information about this role...\"\n              rows={2}\n              data-testid=\"note-input\"\n            />\n          </div>\n\n          <DialogFooter className=\"flex space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"cancel-button\">\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createJobMutation.isPending || updateJobMutation.isPending}\n              data-testid=\"submit-button\"\n            >\n              {isEditing ? \"Update Job\" : \"Create Job\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9692},"client/src/components/Layout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, CheckSquare, Moon, Sun, Brain } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport Notifications from \"@/pages/Notifications\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { isAuthenticated, user } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const [location] = useLocation();\n  const [showNotifications, setShowNotifications] = useState(false);\n\n  const { data: notifications = [] } = useQuery<any[]>({\n    queryKey: [\"/api/notifications\"],\n    enabled: isAuthenticated,\n  });\n\n  const unreadCount = notifications?.filter((n: any) => !n.readStatus).length || 0;\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation Bar */}\n      <nav className=\"fixed top-0 left-0 right-0 bg-card shadow-sm z-50 border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <Link href={isAuthenticated ? \"/hr/dashboard\" : \"/\"}>\n              <div className=\"flex items-center space-x-3 cursor-pointer\" data-testid=\"nav-logo\">\n                <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                  <Brain className=\"text-primary-foreground\" size={20} />\n                </div>\n                <span className=\"text-xl font-bold text-foreground\">Smart Hiring</span>\n              </div>\n            </Link>\n\n            {/* Navigation Items */}\n            {isAuthenticated && (\n              <div className=\"hidden md:flex items-center space-x-8\">\n                <Link href=\"/hr/jobs\" data-testid=\"nav-jobs\">\n                  <span\n                    className={`text-sm font-medium transition-colors hover:text-primary cursor-pointer ${\n                      isActive(\"/hr/jobs\") ? \"text-primary\" : \"text-muted-foreground\"\n                    }`}\n                  >\n                    Jobs\n                  </span>\n                </Link>\n                <Link href=\"/hr/candidates\" data-testid=\"nav-candidates\">\n                  <span\n                    className={`text-sm font-medium transition-colors hover:text-primary cursor-pointer ${\n                      isActive(\"/hr/candidates\") ? \"text-primary\" : \"text-muted-foreground\"\n                    }`}\n                  >\n                    Candidates\n                  </span>\n                </Link>\n                <Link href=\"/hr/upload\" data-testid=\"nav-upload\">\n                  <span\n                    className={`text-sm font-medium transition-colors hover:text-primary cursor-pointer ${\n                      isActive(\"/hr/upload\") ? \"text-primary\" : \"text-muted-foreground\"\n                    }`}\n                  >\n                    Upload & Add\n                  </span>\n                </Link>\n              </div>\n            )}\n\n            {/* Right Side Items */}\n            <div className=\"flex items-center space-x-4\">\n              {/* Theme Toggle */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={toggleTheme}\n                data-testid=\"theme-toggle\"\n              >\n                {theme === \"light\" ? (\n                  <Moon className=\"h-5 w-5\" />\n                ) : (\n                  <Sun className=\"h-5 w-5\" />\n                )}\n              </Button>\n\n              {isAuthenticated ? (\n                <>\n                  {/* Notifications */}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => setShowNotifications(true)}\n                    className=\"relative\"\n                    data-testid=\"notifications-button\"\n                  >\n                    <Bell className=\"h-5 w-5\" />\n                    {unreadCount > 0 && (\n                      <Badge\n                        variant=\"destructive\"\n                        className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n                      >\n                        {unreadCount}\n                      </Badge>\n                    )}\n                  </Button>\n\n                  {/* User Profile */}\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"user-menu\">\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarImage src={user?.profileImageUrl || undefined} alt={user?.name || \"\"} />\n                          <AvatarFallback>\n                            {user?.name?.charAt(0) || user?.email?.charAt(0) || \"U\"}\n                          </AvatarFallback>\n                        </Avatar>\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/hr/profile\">\n                          <span className=\"w-full cursor-pointer\" data-testid=\"profile-link\">Profile</span>\n                        </Link>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/hr/notifications\">\n                          <span className=\"w-full cursor-pointer\" data-testid=\"notifications-link\">Notifications</span>\n                        </Link>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem \n                        onClick={async () => {\n                          try {\n                            await fetch('/api/auth/logout', { method: 'POST' });\n                            window.location.href = '/login';\n                          } catch (error) {\n                            console.error('Logout failed:', error);\n                          }\n                        }}\n                        data-testid=\"logout-button\"\n                      >\n                        Logout\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </>\n              ) : (\n                <div className=\"flex items-center space-x-3\">\n                  <Button variant=\"ghost\" asChild data-testid=\"login-button\">\n                    <Link href=\"/login\">\n                      <span>Login</span>\n                    </Link>\n                  </Button>\n                  <Button asChild data-testid=\"signup-button\">\n                    <Link href=\"/signup\">\n                      <span>Sign Up</span>\n                    </Link>\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <div className=\"pt-16\">\n        {children}\n      </div>\n\n      {/* Notifications Modal */}\n      {showNotifications && (\n        <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n          <div className=\"bg-card rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n            <Notifications onClose={() => setShowNotifications(false)} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7968},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"smart-hiring-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    // Add smooth transition for theme changes\n    root.style.transition = \"color 0.3s ease, background-color 0.3s ease\";\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n\n    // Clean up transition after theme change\n    const timer = setTimeout(() => {\n      root.style.transition = \"\";\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1906},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options: {\n    method: string;\n    body?: FormData | unknown;\n    headers?: Record<string, string>;\n  }\n): Promise<any> {\n  const isFormData = options.body instanceof FormData;\n  \n  const res = await fetch(url, {\n    method: options.method,\n    headers: {\n      ...(isFormData ? {} : { \"Content-Type\": \"application/json\" }),\n      ...options.headers,\n    },\n    body: isFormData ? (options.body as FormData) : (options.body ? JSON.stringify(options.body) : undefined),\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1635},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Candidates.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Plus, Search, UserCheck, UserX, Upload, Edit, Trash2 } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport AddCandidateModal from \"@/components/AddCandidateModal\";\n\nexport default function Candidates() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [positionFilter, setPositionFilter] = useState(\"all\");\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingCandidate, setEditingCandidate] = useState(null);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [selectedCandidate, setSelectedCandidate] = useState<any>(null);\n  const [editFormData, setEditFormData] = useState({\n    status: \"\",\n    interviewLink: \"\",\n    technicalPersonEmail: \"\"\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: candidates = [], isLoading: candidatesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/candidates\"],\n    retry: false,\n  });\n\n  const { data: jobs = [] } = useQuery<any[]>({\n    queryKey: [\"/api/jobs\"],\n    retry: false,\n  });\n\n  const updateCandidateMutation = useMutation({\n    mutationFn: async ({ id, status, interviewLink, technicalPersonEmail }: { id: number; status: string; interviewLink?: string; technicalPersonEmail?: string }) => {\n      await apiRequest(\"PUT\", `/api/candidates/${id}`, { status, interviewLink, technicalPersonEmail });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/candidates\"] });\n      toast({\n        title: \"Success\",\n        description: \"Candidate status updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update candidate status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStatusUpdate = (candidateId: number, newStatus: string) => {\n    updateCandidateMutation.mutate({ id: candidateId, status: newStatus });\n  };\n\n\n\n  const handleCloseModal = () => {\n    setShowAddModal(false);\n    setEditingCandidate(null);\n  };\n\n  const handleEditCandidate = (candidate: any) => {\n    setSelectedCandidate(candidate);\n    setEditFormData({\n      status: candidate.status || \"\",\n      interviewLink: \"\",\n      technicalPersonEmail: \"\"\n    });\n    setShowEditDialog(true);\n  };\n\n  const handleDeleteCandidate = (candidate: any) => {\n    setSelectedCandidate(candidate);\n    setShowDeleteDialog(true);\n  };\n\n  const handleSaveEdit = () => {\n    if (selectedCandidate) {\n      updateCandidateMutation.mutate({ \n        id: selectedCandidate.id, \n        status: editFormData.status,\n        interviewLink: editFormData.interviewLink,\n        technicalPersonEmail: editFormData.technicalPersonEmail\n      });\n      setShowEditDialog(false);\n      setSelectedCandidate(null);\n    }\n  };\n\n  const deleteCandidateMutation = useMutation({\n    mutationFn: async (candidateId: number) => {\n      await apiRequest(`/api/candidates/${candidateId}`, { method: \"DELETE\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/candidates\"] });\n      setShowDeleteDialog(false);\n      setSelectedCandidate(null);\n      toast({\n        title: \"Success\",\n        description: \"Candidate deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete candidate\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConfirmDelete = () => {\n    if (selectedCandidate) {\n      deleteCandidateMutation.mutate(selectedCandidate.id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'resume_reviewed':\n        return <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">Resume Reviewed</Badge>;\n      case 'interview_scheduled':\n        return <Badge className=\"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\">Interview Scheduled</Badge>;\n      case 'report_generated':\n        return <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">Report Generated</Badge>;\n      case 'hired':\n        return <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">Hired</Badge>;\n      case 'not_selected':\n        return <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">Not Selected</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getJobTitle = (jobId: number) => {\n    const job = jobs?.find((j: any) => j.id === jobId);\n    return job?.jobTitle || 'Unknown Position';\n  };\n\n  const filteredCandidates = candidates?.filter((candidate: any) => {\n    const matchesSearch = candidate.candidateName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         candidate.email?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || candidate.status === statusFilter;\n    const matchesPosition = positionFilter === \"all\" || candidate.jobId?.toString() === positionFilter;\n    \n    return matchesSearch && matchesStatus && matchesPosition;\n  }) || [];\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Page Header with enhanced styling */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground flex items-center gap-3\" data-testid=\"page-title\">\n              Candidates ({filteredCandidates.length})\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">Manage and review candidate applications</p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Button asChild data-testid=\"upload-add-button\">\n              <a href=\"/hr/upload\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Upload and Add\n              </a>\n            </Button>\n          </div>\n        </div>\n\n        {/* Table Card */}\n        <Card>\n          {/* Table Controls */}\n          <CardHeader className=\"border-b\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n              {/* Search */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search candidates...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 max-w-sm\"\n                  data-testid=\"search-input\"\n                />\n              </div>\n              \n              {/* Filters */}\n              <div className=\"flex space-x-3\">\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-[140px]\" data-testid=\"status-filter\">\n                    <SelectValue placeholder=\"All Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"resume_reviewed\">Resume Reviewed</SelectItem>\n                    <SelectItem value=\"interview_scheduled\">Interview Scheduled</SelectItem>\n                    <SelectItem value=\"report_generated\">Report Generated</SelectItem>\n                    <SelectItem value=\"hired\">Hired</SelectItem>\n                    <SelectItem value=\"not_selected\">Not Selected</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Select value={positionFilter} onValueChange={setPositionFilter}>\n                  <SelectTrigger className=\"w-[160px]\" data-testid=\"position-filter\">\n                    <SelectValue placeholder=\"All Positions\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Positions</SelectItem>\n                    {jobs?.map((job: any) => (\n                      <SelectItem key={job.id} value={job.id.toString()}>\n                        {job.jobTitle}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n\n          {/* Candidates Table */}\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Candidate</TableHead>\n                    <TableHead>Job Position</TableHead>\n                    <TableHead>Skills</TableHead>\n                    <TableHead>Experience</TableHead>\n                    <TableHead>Match %</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {candidatesLoading ? (\n                    <TableRow>\n                      <TableCell colSpan={7} className=\"text-center py-8\">\n                        Loading candidates...\n                      </TableCell>\n                    </TableRow>\n                  ) : filteredCandidates.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                        No candidates found\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredCandidates.map((candidate: any) => (\n                      <TableRow key={candidate.id} className=\"hover:bg-muted/50\" data-testid={`candidate-row-${candidate.id}`}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarFallback>\n                                {candidate.candidateName?.charAt(0) || 'C'}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <div className=\"font-medium text-foreground\">{candidate.candidateName}</div>\n                              <div className=\"text-sm text-muted-foreground\">{candidate.email}</div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-foreground\">\n                          {getJobTitle(candidate.jobId)}\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          {candidate.candidateSkills?.join(', ') || 'No skills specified'}\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          {candidate.candidateExperience || 'Not specified'}\n                        </TableCell>\n                        <TableCell>\n                          {candidate.matchPercentage ? (\n                            <div className=\"flex items-center space-x-2\">\n                              <span className={`text-sm font-medium ${\n                                candidate.matchPercentage >= 80 ? 'text-green-600' :\n                                candidate.matchPercentage >= 60 ? 'text-yellow-600' :\n                                'text-red-600'\n                              }`}>\n                                {Math.round(candidate.matchPercentage)}%\n                              </span>\n                              <Progress\n                                value={candidate.matchPercentage}\n                                className=\"w-16 h-2\"\n                              />\n                            </div>\n                          ) : (\n                            <span className=\"text-muted-foreground\">N/A</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(candidate.status)}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditCandidate(candidate)}\n                              className=\"text-blue-600 hover:text-blue-700\"\n                              data-testid={`edit-candidate-${candidate.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteCandidate(candidate)}\n                              className=\"text-red-600 hover:text-red-700\"\n                              data-testid={`delete-candidate-${candidate.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n\n            {/* Pagination */}\n            {filteredCandidates.length > 0 && (\n              <div className=\"px-6 py-4 border-t\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    Showing <span className=\"font-medium\">1</span> to{\" \"}\n                    <span className=\"font-medium\">{Math.min(filteredCandidates.length, 10)}</span> of{\" \"}\n                    <span className=\"font-medium\">{filteredCandidates.length}</span> results\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" disabled>\n                      Previous\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-primary-foreground\">\n                      1\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" disabled>\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Add/Edit Candidate Modal */}\n        {showAddModal && (\n          <AddCandidateModal\n            candidate={editingCandidate}\n            onClose={handleCloseModal}\n          />\n        )}\n\n        {/* Edit Candidate Dialog */}\n        <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit Candidate</DialogTitle>\n              <DialogDescription>\n                Update candidate status and information for {selectedCandidate?.candidateName}\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Status</label>\n                <Select value={editFormData.status} onValueChange={(value) => setEditFormData(prev => ({...prev, status: value}))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"resume_reviewed\">Resume Reviewed</SelectItem>\n                    <SelectItem value=\"interview_scheduled\">Interview Scheduled</SelectItem>\n                    <SelectItem value=\"report_generated\">Report Generated</SelectItem>\n                    <SelectItem value=\"hired\">Hired</SelectItem>\n                    <SelectItem value=\"not_selected\">Not Selected</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {editFormData.status === 'interview_scheduled' && (\n                <>\n                  <div>\n                    <label className=\"text-sm font-medium\">Interview Link *</label>\n                    <Input\n                      value={editFormData.interviewLink}\n                      onChange={(e) => setEditFormData(prev => ({...prev, interviewLink: e.target.value}))}\n                      placeholder=\"https://zoom.us/j/...\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Technical Person Email</label>\n                    <Input\n                      value={editFormData.technicalPersonEmail}\n                      onChange={(e) => setEditFormData(prev => ({...prev, technicalPersonEmail: e.target.value}))}\n                      placeholder=\"tech@company.com\"\n                      type=\"email\"\n                    />\n                  </div>\n                </>\n              )}\n            </div>\n            \n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowEditDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleSaveEdit} disabled={updateCandidateMutation.isPending}>\n                Save Changes\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Delete Candidate Dialog */}\n        <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Delete Candidate</DialogTitle>\n              <DialogDescription>\n                Are you sure you want to delete {selectedCandidate?.candidateName}? This action cannot be undone.\n              </DialogDescription>\n            </DialogHeader>\n            \n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowDeleteDialog(false)}>\n                Cancel\n              </Button>\n              <Button \n                variant=\"destructive\" \n                onClick={handleConfirmDelete}\n                disabled={deleteCandidateMutation.isPending}\n              >\n                Delete\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20953},"client/src/pages/HRDashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Users, Briefcase, Clock, CheckSquare } from \"lucide-react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\nimport { Link } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function HRDashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<{\n    jobStats: { total: number; active: number };\n    candidateStats: Array<{ status: string; count: number }>;\n    pipelineData: Array<{ stage: string; count: number }>;\n    chartData: Array<{ month: string; opened: number; filled: number }>;\n  }>({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  const { data: todos = [], isLoading: todosLoading } = useQuery<any[]>({\n    queryKey: [\"/api/todos\"],\n    retry: false,\n  });\n\n  if (isLoading || statsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  // Prepare chart data\n  const chartData = stats?.chartData || [];\n  const pipelineData = stats?.pipelineData || [];\n  const candidateStats = stats?.candidateStats || [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex h-screen pt-16\">\n        {/* Main Content */}\n        <div className=\"flex-1 p-6 pr-80 overflow-auto\">\n          <div className=\"max-w-7xl mx-auto space-y-6\">\n            {/* Header */}\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold tracking-tight\">HR Dashboard</h1>\n                <p className=\"text-muted-foreground\">Welcome back, {user?.name || user?.email}</p>\n              </div>\n            </div>\n\n            {/* Quick Stats Cards - Clickable */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Link href=\"/hr/jobs\" data-testid=\"total-jobs-card\">\n                <Card className=\"cursor-pointer hover:shadow-lg transition-all duration-200 hover:-translate-y-1\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Jobs</CardTitle>\n                    <Briefcase className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{stats?.jobStats?.total || 0}</div>\n                    <p className=\"text-xs text-muted-foreground\">Active: {stats?.jobStats?.active || 0}</p>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              <Link href=\"/hr/candidates\" data-testid=\"total-candidates-card\">\n                <Card className=\"cursor-pointer hover:shadow-lg transition-all duration-200 hover:-translate-y-1\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Candidates</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      {candidateStats.reduce((sum, stat) => sum + Number(stat.count), 0)}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">In pipeline</p>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              <Link href=\"/hr/notifications\" data-testid=\"pending-tasks-card\">\n                <Card className=\"cursor-pointer hover:shadow-lg transition-all duration-200 hover:-translate-y-1\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Pending Tasks</CardTitle>\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      {todos.filter((todo: any) => !todo.isCompleted).length}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">To do items</p>\n                  </CardContent>\n                </Card>\n              </Link>\n            </div>\n\n            {/* Charts Section */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Stacked Column Chart: Jobs Opened vs Filled */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Jobs Opened vs Filled</CardTitle>\n                  <CardDescription>Monthly comparison of job openings and fills</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={chartData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <Tooltip \n                        contentStyle={{ \n                          backgroundColor: \"hsl(var(--background))\", \n                          border: \"1px solid hsl(var(--border))\",\n                          borderRadius: \"6px\"\n                        }}\n                      />\n                      <Bar dataKey=\"opened\" fill=\"hsl(220, 70%, 50%)\" name=\"Jobs Opened\" />\n                      <Bar dataKey=\"filled\" fill=\"hsl(142, 76%, 36%)\" name=\"Jobs Filled\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              {/* Bar Chart: Candidate Status Distribution */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Candidate Status Distribution</CardTitle>\n                  <CardDescription>Candidates at each status in the hiring process</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={pipelineData} layout=\"horizontal\">\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                      <XAxis type=\"number\" />\n                      <YAxis dataKey=\"stage\" type=\"category\" width={120} />\n                      <Tooltip \n                        contentStyle={{ \n                          backgroundColor: \"hsl(var(--background))\", \n                          border: \"1px solid hsl(var(--border))\",\n                          borderRadius: \"6px\"\n                        }}\n                      />\n                      <Bar dataKey=\"count\" fill=\"hsl(var(--primary))\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Pie Chart: Candidate Status Breakdown */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Candidate Status Breakdown</CardTitle>\n                <CardDescription>Visual breakdown of all candidates by status</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={candidateStats}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                      label={({ status, count }) => `${status}: ${count}`}\n                    >\n                      {candidateStats.map((entry: any, index: number) => {\n                        const colors = [\n                          \"hsl(220, 70%, 50%)\", // Blue for Resume Reviewed\n                          \"hsl(32, 95%, 44%)\",  // Orange for Interview Scheduled  \n                          \"hsl(271, 81%, 56%)\", // Purple for Report Generated\n                          \"hsl(142, 76%, 36%)\", // Green for Hired\n                          \"hsl(0, 84%, 60%)\"    // Red for Not Selected\n                        ];\n                        return (\n                          <Cell \n                            key={`cell-${index}`} \n                            fill={colors[index % colors.length]} \n                          />\n                        );\n                      })}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: \"hsl(var(--background))\", \n                        border: \"1px solid hsl(var(--border))\",\n                        borderRadius: \"6px\"\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Right Side Panel - To-Do List */}\n        <div className=\"fixed right-0 top-16 h-full w-80 bg-card border-l border-border p-6 overflow-auto\">\n          <div className=\"space-y-6\">\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">To-Do List</h2>\n              {todosLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : todos.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <CheckSquare className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                  <p>No tasks found</p>\n                  <p className=\"text-sm\">You're all caught up!</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {todos.map((todo: any) => (\n                    <div\n                      key={todo.id}\n                      className={`p-3 rounded-lg border ${\n                        todo.isCompleted \n                          ? 'bg-muted/50 border-muted' \n                          : 'bg-background border-border'\n                      }`}\n                    >\n                      <div className=\"flex items-start space-x-3\">\n                        <Checkbox\n                          checked={todo.isCompleted}\n                          className=\"mt-1\"\n                          data-testid={`todo-checkbox-${todo.id}`}\n                        />\n                        <div className=\"flex-1 min-w-0\">\n                          <p className={`text-sm ${\n                            todo.isCompleted \n                              ? 'line-through text-muted-foreground' \n                              : 'text-foreground'\n                          }`}>\n                            {todo.task}\n                          </p>\n                          {todo.createdAt && (\n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                              {new Date(todo.createdAt).toLocaleDateString()}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12411},"client/src/pages/Jobs.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Plus, Search, Edit, Trash2 } from \"lucide-react\";\nimport AddJobModal from \"@/components/AddJobModal\";\n\nexport default function Jobs() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingJob, setEditingJob] = useState(null);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: jobs = [], isLoading: jobsLoading, error } = useQuery<any[]>({\n    queryKey: [\"/api/jobs\"],\n    retry: false,\n  });\n\n  const deleteJobMutation = useMutation({\n    mutationFn: async (jobId: number) => {\n      await apiRequest(`/api/jobs/${jobId}`, { method: \"DELETE\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      toast({\n        title: \"Success\",\n        description: \"Job deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete job\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteJob = (jobId: number) => {\n    if (window.confirm(\"Are you sure you want to delete this job?\")) {\n      deleteJobMutation.mutate(jobId);\n    }\n  };\n\n  const handleEditJob = (job: any) => {\n    setEditingJob(job);\n    setShowAddModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowAddModal(false);\n    setEditingJob(null);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'active':\n        return <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">Active</Badge>;\n      case 'closed':\n        return <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">Closed</Badge>;\n      case 'draft':\n        return <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">Draft</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const filteredJobs = jobs?.filter((job: any) => {\n    const matchesSearch = job.jobTitle?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         job.jobDescription?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || job.jobStatus === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Page Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"page-title\">Jobs</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage your job postings and requirements</p>\n          </div>\n          <Button onClick={() => setShowAddModal(true)} data-testid=\"add-job-button\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Add Job\n          </Button>\n        </div>\n\n        {/* Table Card */}\n        <Card>\n          {/* Table Controls */}\n          <CardHeader className=\"border-b\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n              {/* Search */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search jobs...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 max-w-sm\"\n                  data-testid=\"search-input\"\n                />\n              </div>\n              \n              {/* Filters */}\n              <div className=\"flex space-x-3\">\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-[140px]\" data-testid=\"status-filter\">\n                    <SelectValue placeholder=\"All Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"closed\">Closed</SelectItem>\n                    <SelectItem value=\"draft\">Draft</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n\n          {/* Jobs Table */}\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Job Title</TableHead>\n                    <TableHead>ID</TableHead>\n                    <TableHead>Added By</TableHead>\n                    <TableHead>HR Handling</TableHead>\n                    <TableHead>Experience</TableHead>\n                    <TableHead>Positions</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {jobsLoading ? (\n                    <TableRow>\n                      <TableCell colSpan={8} className=\"text-center py-8\">\n                        Loading jobs...\n                      </TableCell>\n                    </TableRow>\n                  ) : filteredJobs.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\n                        No jobs found\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredJobs.map((job: any) => (\n                      <TableRow key={job.id} className=\"hover:bg-muted/50\" data-testid={`job-row-${job.id}`}>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium text-foreground\">{job.jobTitle}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {job.skills?.join(', ') || 'No skills specified'}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">#{job.id}</TableCell>\n                        <TableCell className=\"text-foreground\">{job.addedByUserId || 'N/A'}</TableCell>\n                        <TableCell className=\"text-foreground\">{job.hrHandlingUserId || 'N/A'}</TableCell>\n                        <TableCell className=\"text-muted-foreground\">{job.experience || 'Not specified'}</TableCell>\n                        <TableCell className=\"text-muted-foreground\">{job.positionsCount || 1}</TableCell>\n                        <TableCell>\n                          {getStatusBadge(job.jobStatus)}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditJob(job)}\n                              data-testid={`edit-job-${job.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteJob(job.id)}\n                              className=\"text-destructive hover:text-destructive\"\n                              data-testid={`delete-job-${job.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n\n            {/* Pagination */}\n            {filteredJobs.length > 0 && (\n              <div className=\"px-6 py-4 border-t\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    Showing <span className=\"font-medium\">1</span> to{\" \"}\n                    <span className=\"font-medium\">{Math.min(filteredJobs.length, 10)}</span> of{\" \"}\n                    <span className=\"font-medium\">{filteredJobs.length}</span> results\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" disabled>\n                      Previous\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-primary-foreground\">\n                      1\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" disabled>\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Add/Edit Job Modal */}\n        {showAddModal && (\n          <AddJobModal\n            job={editingJob}\n            onClose={handleCloseModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11242},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Brain, Users, BarChart3, FileText, MessageSquare, TrendingUp } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 w-full bg-background/80 backdrop-blur-md border-b border-border z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Brain className=\"h-8 w-8 text-primary mr-2\" />\n              <span className=\"text-xl font-bold text-foreground\">SmartHire</span>\n            </div>\n            <div className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#features\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Features</a>\n              <a href=\"#pricing\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Pricing</a>\n              <a href=\"#contact\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Contact</a>\n              <Button asChild data-testid=\"nav-login-button\">\n                <a href=\"/api/login\">Sign In</a>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"pt-24 pb-20 px-4 bg-gradient-to-br from-blue-50/50 via-background to-background dark:from-blue-950/20 dark:via-background dark:to-background\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold text-foreground leading-tight mb-6\">\n                Revolutionize Your{\" \"}\n                <span className=\"text-blue-600 dark:text-blue-400\">Hiring</span> with AI.\n              </h1>\n              <p className=\"text-xl text-muted-foreground mb-8 leading-relaxed\">\n                Streamline your recruitment process with intelligent resume matching, automated AI interviews, and insightful performance reports. Transform how you discover and hire top talent.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700 text-white\" asChild data-testid=\"get-started-button\">\n                  <a href=\"/api/login\">Get Started</a>\n                </Button>\n                <Button variant=\"outline\" size=\"lg\" asChild data-testid=\"free-trial-button\">\n                  <a href=\"/api/login\">Try for Free</a>\n                </Button>\n              </div>\n            </div>\n            <div className=\"relative\">\n              <div className=\"relative bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900/30 dark:to-blue-800/20 rounded-2xl p-8 min-h-[400px] flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <Brain className=\"w-24 h-24 text-blue-600 dark:text-blue-400 mx-auto mb-4\" />\n                  <div className=\"grid grid-cols-3 gap-4 max-w-sm\">\n                    <div className=\"bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm\">\n                      <FileText className=\"w-6 h-6 text-blue-500 mx-auto\" />\n                    </div>\n                    <div className=\"bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm\">\n                      <Users className=\"w-6 h-6 text-green-500 mx-auto\" />\n                    </div>\n                    <div className=\"bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm\">\n                      <BarChart3 className=\"w-6 h-6 text-purple-500 mx-auto\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 px-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Intelligent Hiring Features\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Powered by advanced AI to make your recruitment process more efficient\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-20\">\n            {/* Feature 1 - AI Based Resume Matching */}\n            <div className=\"bg-gradient-to-br from-blue-50 to-white dark:from-blue-950/20 dark:to-background rounded-2xl p-8 hover:shadow-lg transition-all\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mr-4\">\n                  <FileText className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <Badge className=\"bg-blue-100 text-blue-700 dark:bg-blue-900/50 dark:text-blue-300\">AI POWERED</Badge>\n              </div>\n              <h3 className=\"text-xl font-bold text-foreground mb-4\">AI Based Resume matching</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Advanced algorithms analyze resumes and match candidates with job requirements, providing detailed compatibility scores and skill assessments for better hiring decisions.\n              </p>\n              <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\" asChild>\n                <a href=\"/api/login\">Learn More</a>\n              </Button>\n              <div className=\"mt-6 relative\">\n                <div className=\"aspect-video bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900/20 dark:to-blue-800/10 rounded-lg flex items-center justify-center\">\n                  <div className=\"grid grid-cols-2 gap-2 max-w-[200px]\">\n                    <div className=\"bg-white dark:bg-gray-800 p-2 rounded shadow-sm\">\n                      <div className=\"h-2 bg-blue-200 dark:bg-blue-800 rounded mb-1\"></div>\n                      <div className=\"h-1 bg-gray-200 dark:bg-gray-600 rounded\"></div>\n                    </div>\n                    <div className=\"bg-white dark:bg-gray-800 p-2 rounded shadow-sm\">\n                      <div className=\"h-2 bg-green-200 dark:bg-green-800 rounded mb-1\"></div>\n                      <div className=\"h-1 bg-gray-200 dark:bg-gray-600 rounded\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Feature 2 - AI Interviews */}\n            <div className=\"bg-gradient-to-br from-green-50 to-white dark:from-green-950/20 dark:to-background rounded-2xl p-8 hover:shadow-lg transition-all\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center mr-4\">\n                  <MessageSquare className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                </div>\n                <Badge className=\"bg-green-100 text-green-700 dark:bg-green-900/50 dark:text-green-300\">ADVANCED</Badge>\n              </div>\n              <h3 className=\"text-xl font-bold text-foreground mb-4\">AI Interviews based on Resumes</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Generate tailored interview questions automatically based on candidate resumes and job requirements. Conduct intelligent interviews that adapt to each candidate's background and experience.\n              </p>\n              <Button className=\"bg-green-600 hover:bg-green-700 text-white\" asChild>\n                <a href=\"/api/login\">Learn More</a>\n              </Button>\n              <div className=\"mt-6 relative\">\n                <div className=\"aspect-video bg-gradient-to-br from-green-100 to-green-200 dark:from-green-900/20 dark:to-green-800/10 rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <MessageSquare className=\"w-16 h-16 text-green-600 dark:text-green-400 mx-auto mb-2\" />\n                    <div className=\"flex space-x-1 justify-center\">\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Feature 3 - Performance Reports */}\n            <div className=\"bg-gradient-to-br from-purple-50 to-white dark:from-purple-950/20 dark:to-background rounded-2xl p-8 hover:shadow-lg transition-all\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-lg flex items-center justify-center mr-4\">\n                  <TrendingUp className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n                </div>\n                <Badge className=\"bg-purple-100 text-purple-700 dark:bg-purple-900/50 dark:text-purple-300\">INSIGHTFUL</Badge>\n              </div>\n              <h3 className=\"text-xl font-bold text-foreground mb-4\">Performance Reports: Resume Reports Vs Interview Report</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Get comprehensive insights comparing resume qualifications with interview performance. Make data-driven hiring decisions with detailed analytics and candidate assessments.\n              </p>\n              <Button className=\"bg-purple-600 hover:bg-purple-700 text-white\" asChild>\n                <a href=\"/api/login\">Learn More</a>\n              </Button>\n              <div className=\"mt-6 relative\">\n                <div className=\"aspect-video bg-gradient-to-br from-purple-100 to-purple-200 dark:from-purple-900/20 dark:to-purple-800/10 rounded-lg flex items-center justify-center\">\n                  <BarChart3 className=\"w-16 h-16 text-purple-600 dark:text-purple-400\" />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Call to Action Section */}\n          <div className=\"bg-gradient-to-r from-blue-600 to-blue-800 dark:from-blue-700 dark:to-blue-900 rounded-2xl p-12 text-center text-white\">\n            <h3 className=\"text-2xl md:text-3xl font-bold mb-4\">Are you ready to take control?</h3>\n            <p className=\"text-xl mb-8 text-blue-100\">\n              Transform your recruitment process with AI-powered tools that deliver results.\n            </p>\n            <Button size=\"lg\" className=\"bg-white text-blue-600 hover:bg-gray-100\" asChild>\n              <a href=\"/api/login\">Get Started Now</a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 px-4 bg-gray-50 dark:bg-gray-950/50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              The Right Plan For Your Company\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Choose the perfect plan to scale your hiring process\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-12\">\n            {/* Basic Plan */}\n            <Card className=\"hover:shadow-lg transition-shadow bg-background\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">Basic</CardTitle>\n                <div className=\"text-4xl font-bold text-foreground mt-4\">Free</div>\n                <CardDescription>Perfect for small teams</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Up to 10 candidates per month</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Basic resume matching</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Standard reports</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Email support</span>\n                </div>\n                <Button className=\"w-full mt-6\" asChild>\n                  <a href=\"/api/login\">Get Started</a>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Pro Plan */}\n            <Card className=\"hover:shadow-lg transition-shadow bg-background border-2 border-blue-500 relative\">\n              <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                <Badge className=\"bg-blue-500 text-white\">Most Popular</Badge>\n              </div>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">Pro</CardTitle>\n                <div className=\"text-4xl font-bold text-foreground mt-4\">$49</div>\n                <CardDescription>For growing companies</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Up to 100 candidates per month</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Advanced AI matching</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>AI interview questions</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Detailed analytics</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Priority support</span>\n                </div>\n                <Button className=\"w-full mt-6 bg-blue-600 hover:bg-blue-700\" asChild>\n                  <a href=\"/api/login\">Start Free Trial</a>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Enterprise Plan */}\n            <Card className=\"hover:shadow-lg transition-shadow bg-background\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">Enterprise</CardTitle>\n                <div className=\"text-4xl font-bold text-foreground mt-4\">Custom</div>\n                <CardDescription>For large organizations</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Unlimited candidates</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Custom integrations</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Dedicated account manager</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>24/7 phone support</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Check className=\"w-5 h-5 text-green-500 mr-3\" />\n                  <span>Advanced security</span>\n                </div>\n                <Button className=\"w-full mt-6\" variant=\"outline\" asChild>\n                  <a href=\"/api/login\">Contact Sales</a>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Newsletter Section */}\n      <section className=\"py-20 px-4 bg-blue-600 dark:bg-blue-800\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n            Subscribe to our newsletter\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            Get the latest insights on AI recruitment and hiring best practices\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 max-w-md mx-auto\">\n            <input \n              type=\"email\" \n              placeholder=\"Enter your email\" \n              className=\"flex-1 px-4 py-3 rounded-lg text-foreground\"\n            />\n            <Button className=\"bg-white text-blue-600 hover:bg-gray-100 px-8\">\n              Subscribe\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer id=\"contact\" className=\"bg-background border-t border-border py-12 px-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center mb-4\">\n                <Brain className=\"h-8 w-8 text-primary mr-2\" />\n                <span className=\"text-xl font-bold text-foreground\">SmartHire</span>\n              </div>\n              <p className=\"text-muted-foreground mb-4\">\n                Revolutionizing recruitment with AI-powered solutions for modern businesses.\n              </p>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">\n                  <span className=\"sr-only\">Twitter</span>\n                  <div className=\"w-6 h-6 bg-current rounded\"></div>\n                </a>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">\n                  <span className=\"sr-only\">LinkedIn</span>\n                  <div className=\"w-6 h-6 bg-current rounded\"></div>\n                </a>\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-foreground mb-4\">Product</h3>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#features\" className=\"text-muted-foreground hover:text-foreground\">Features</a></li>\n                <li><a href=\"#pricing\" className=\"text-muted-foreground hover:text-foreground\">Pricing</a></li>\n                <li><a href=\"/api/login\" className=\"text-muted-foreground hover:text-foreground\">Dashboard</a></li>\n                <li><a href=\"/api/login\" className=\"text-muted-foreground hover:text-foreground\">Analytics</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-foreground mb-4\">Company</h3>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">About</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">Blog</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">Careers</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">Press</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-foreground mb-4\">Support</h3>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">Help Center</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">Documentation</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">API</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-foreground\">Contact</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-border mt-8 pt-8 text-center\">\n            <p className=\"text-muted-foreground\">\n              © 2025 SmartHire. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":20865},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Brain } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email\"),\n  password: z.string().min(1, \"Password is required\"),\n  role: z.enum([\"Super Admin\", \"Company Admin\", \"HR\"], {\n    required_error: \"Please select a role\",\n  }),\n  company: z.string().optional(),\n}).refine((data) => {\n  // Company is required for non-Super Admin roles\n  if (data.role !== \"Super Admin\" && !data.company) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Company is required for Company Admin and HR roles\",\n  path: [\"company\"],\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  \n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      role: undefined,\n      company: \"\",\n    },\n  });\n\n  const selectedRole = form.watch(\"role\");\n  const showCompanyField = selectedRole && selectedRole !== \"Super Admin\";\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest(\"/api/auth/login\", {\n        method: \"POST\",\n        body: data,\n      });\n      \n      toast({\n        title: \"Login successful\",\n        description: \"Welcome back!\",\n      });\n\n      // Redirect based on role\n      if (data.role === \"Super Admin\") {\n        window.location.href = \"/super-admin/dashboard\";\n      } else if (data.role === \"Company Admin\") {\n        window.location.href = \"/company-admin/dashboard\";\n      } else {\n        window.location.href = \"/hr/dashboard\";\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-primary/10 to-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <Brain className=\"text-primary-foreground\" size={32} />\n          </div>\n          <CardTitle className=\"text-2xl\">Smart Hiring</CardTitle>\n          <CardDescription>Sign in to your account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            {/* Email */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                {...form.register(\"email\")}\n                data-testid=\"email-input\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            {/* Role */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Role</Label>\n              <Select\n                value={form.watch(\"role\") || \"\"}\n                onValueChange={(value) => form.setValue(\"role\", value as any)}\n              >\n                <SelectTrigger data-testid=\"role-select\">\n                  <SelectValue placeholder=\"Select your role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Super Admin\">Super Admin</SelectItem>\n                  <SelectItem value=\"Company Admin\">Company Admin</SelectItem>\n                  <SelectItem value=\"HR\">HR</SelectItem>\n                </SelectContent>\n              </Select>\n              {form.formState.errors.role && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.role.message}\n                </p>\n              )}\n            </div>\n\n            {/* Company (conditional) */}\n            {showCompanyField && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"company\">Company</Label>\n                <Input\n                  id=\"company\"\n                  placeholder=\"Enter your company name\"\n                  {...form.register(\"company\")}\n                  data-testid=\"company-input\"\n                />\n                {form.formState.errors.company && (\n                  <p className=\"text-sm text-destructive\">\n                    {form.formState.errors.company.message}\n                  </p>\n                )}\n              </div>\n            )}\n\n            {/* Password */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                {...form.register(\"password\")}\n                data-testid=\"password-input\"\n              />\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.password.message}\n                </p>\n              )}\n            </div>\n\n            {/* Submit Button */}\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"login-button\"\n            >\n              {isLoading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center text-sm\">\n            <p className=\"text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link href=\"/signup\">\n                <span className=\"text-primary hover:underline cursor-pointer\">\n                  Sign up\n                </span>\n              </Link>\n            </p>\n            <p className=\"mt-2\">\n              <Link href=\"/\">\n                <span className=\"text-primary hover:underline cursor-pointer\">\n                  Back to Home\n                </span>\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6952},"client/src/pages/Notifications.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Bell, CheckCircle, Clock, X, Users, FileText, Calendar } from \"lucide-react\";\n\ninterface NotificationsProps {\n  onClose?: () => void;\n}\n\nexport default function Notifications({ onClose }: NotificationsProps) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: notifications = [], isLoading: notificationsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/notifications\"],\n    retry: false,\n  });\n\n  const { data: todos = [], isLoading: todosLoading } = useQuery<any[]>({\n    queryKey: [\"/api/todos\"],\n    retry: false,\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"PUT\", \"/api/notifications/read-all\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      toast({\n        title: \"Success\",\n        description: \"All notifications marked as read\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark notifications as read\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTodoMutation = useMutation({\n    mutationFn: async ({ id, isCompleted }: { id: number; isCompleted: boolean }) => {\n      await apiRequest(\"PUT\", `/api/todos/${id}`, { isCompleted });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/todos\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggleTodo = (id: number, isCompleted: boolean) => {\n    updateTodoMutation.mutate({ id, isCompleted: !isCompleted });\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n\n    if (diffInMinutes < 1) return \"Just now\";\n    if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} hours ago`;\n    return `${Math.floor(diffInMinutes / 1440)} days ago`;\n  };\n\n  const getNotificationIcon = (message: string) => {\n    if (message.toLowerCase().includes(\"candidate\")) return <Users className=\"h-4 w-4\" />;\n    if (message.toLowerCase().includes(\"interview\")) return <Calendar className=\"h-4 w-4\" />;\n    if (message.toLowerCase().includes(\"report\")) return <FileText className=\"h-4 w-4\" />;\n    return <Bell className=\"h-4 w-4\" />;\n  };\n\n  const unreadNotifications = notifications?.filter((n: any) => !n.readStatus) || [];\n  const readNotifications = notifications?.filter((n: any) => n.readStatus) || [];\n  const incompleteTodos = todos?.filter((t: any) => !t.isCompleted) || [];\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"h-full flex\">\n      {/* To-Do Section (Left) */}\n      <div className=\"flex-1 p-6 border-r border-border\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"tasks-title\">\n            {incompleteTodos.length} tasks\n          </h2>\n          {onClose && (\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose} data-testid=\"close-modal\">\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n        \n        <ScrollArea className=\"h-[600px] pr-4\">\n          <div className=\"space-y-4\">\n            {/* 360° Review Section */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg\">360° Review</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <span className=\"text-sm text-foreground\">Write reviews for</span>\n                  <Button size=\"sm\" data-testid=\"write-reviews-button\">\n                    Write reviews\n                  </Button>\n                </div>\n                <div className=\"flex -space-x-1\">\n                  <Avatar className=\"w-8 h-8 border-2 border-background\">\n                    <AvatarFallback className=\"text-xs\">JD</AvatarFallback>\n                  </Avatar>\n                  <Avatar className=\"w-8 h-8 border-2 border-background\">\n                    <AvatarFallback className=\"text-xs\">SM</AvatarFallback>\n                  </Avatar>\n                  <Avatar className=\"w-8 h-8 border-2 border-background\">\n                    <AvatarFallback className=\"text-xs\">AB</AvatarFallback>\n                  </Avatar>\n                  <div className=\"w-8 h-8 rounded-full bg-muted border-2 border-background flex items-center justify-center\">\n                    <span className=\"text-xs\">+3</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Sample Tasks */}\n            <Card>\n              <CardContent className=\"pt-4 space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Checkbox className=\"mt-1\" data-testid=\"direct-report-task\" />\n                    <div>\n                      <span className=\"text-sm text-foreground\">Turn on updates for your new direct report</span>\n                      <div className=\"flex items-center mt-2\">\n                        <Avatar className=\"w-6 h-6 mr-2\">\n                          <AvatarFallback className=\"text-xs\">FG</AvatarFallback>\n                        </Avatar>\n                        <span className=\"text-sm text-muted-foreground\">Fletcher Guerrero</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Checkbox className=\"mt-1\" data-testid=\"goals-task\" />\n                    <span className=\"text-sm text-foreground\">Update your 8 goals</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Dynamic Tasks from API */}\n            {todosLoading ? (\n              <Card>\n                <CardContent className=\"py-8 text-center\">\n                  <p className=\"text-sm text-muted-foreground\">Loading tasks...</p>\n                </CardContent>\n              </Card>\n            ) : incompleteTodos.length > 0 ? (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Your Tasks</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {incompleteTodos.map((todo: any) => (\n                    <div key={todo.id} className=\"flex items-start space-x-3 p-3 bg-muted/50 rounded-lg\">\n                      <Checkbox\n                        checked={todo.isCompleted}\n                        onCheckedChange={() => handleToggleTodo(todo.id, todo.isCompleted)}\n                        className=\"mt-1\"\n                        data-testid={`todo-${todo.id}`}\n                      />\n                      <span className={`text-sm ${todo.isCompleted ? 'line-through text-muted-foreground' : 'text-foreground'}`}>\n                        {todo.task}\n                      </span>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardContent className=\"py-8 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-3\" />\n                  <h3 className=\"text-lg font-medium text-foreground mb-2\">All caught up!</h3>\n                  <p className=\"text-sm text-muted-foreground\">No pending tasks at the moment.</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </ScrollArea>\n\n        <div className=\"mt-6\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"view-more-tasks\">\n            View more tasks\n          </Button>\n        </div>\n      </div>\n\n      {/* Notifications Section (Right) */}\n      <div className=\"w-80 p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-lg font-semibold text-foreground\" data-testid=\"notifications-title\">\n            Notifications\n          </h2>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => markAllAsReadMutation.mutate()}\n            disabled={unreadNotifications.length === 0}\n            data-testid=\"mark-all-read\"\n          >\n            Mark all as read\n          </Button>\n        </div>\n\n        <ScrollArea className=\"h-[600px] pr-4\">\n          <div className=\"space-y-4\">\n            {notificationsLoading ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-sm text-muted-foreground\">Loading notifications...</p>\n              </div>\n            ) : notifications && notifications.length > 0 ? (\n              <>\n                {/* Unread Notifications */}\n                {unreadNotifications.map((notification: any) => (\n                  <div\n                    key={notification.id}\n                    className={`p-3 rounded-lg border-l-4 ${\n                      notification.message.toLowerCase().includes('deadline') || notification.message.toLowerCase().includes('reminder')\n                        ? 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-500'\n                        : 'bg-primary/5 border-primary'\n                    }`}\n                    data-testid={`notification-${notification.id}`}\n                  >\n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"mt-1\">\n                        {getNotificationIcon(notification.message)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-foreground\">\n                          {notification.message}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {formatTimestamp(notification.timestamp)}\n                        </p>\n                      </div>\n                      {!notification.readStatus && (\n                        <Badge variant=\"secondary\" className=\"ml-2\">\n                          New\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                ))}\n\n                {/* Read Notifications */}\n                {readNotifications.slice(0, 5).map((notification: any) => (\n                  <div\n                    key={notification.id}\n                    className=\"p-3 bg-muted/50 rounded-lg\"\n                    data-testid={`notification-${notification.id}`}\n                  >\n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"mt-1 text-muted-foreground\">\n                        {getNotificationIcon(notification.message)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          {notification.message}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {formatTimestamp(notification.timestamp)}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Bell className=\"h-12 w-12 text-muted-foreground mx-auto mb-3\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No notifications</h3>\n                <p className=\"text-sm text-muted-foreground\">You're all caught up!</p>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n\n        {notifications && notifications.length > 5 && (\n          <div className=\"mt-6\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"see-more-notifications\">\n              See more notifications\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14405},"client/src/pages/NotificationsPage.tsx":{"content":"import Notifications from \"@/pages/Notifications\";\n\nexport default function NotificationsPage() {\n  return <Notifications onClose={() => {}} />;\n}","size_bytes":146},"client/src/pages/Profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { User, Mail, Building, Shield, Camera, Save, X } from \"lucide-react\";\n\nexport default function Profile() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    role: \"\",\n    companyId: \"\",\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Initialize form data when user data is available\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        name: user.name || \"\",\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        email: user.email || \"\",\n        role: user.role || \"\",\n        companyId: user.companyId?.toString() || \"\",\n      });\n    }\n  }, [user]);\n\n  const { data: company } = useQuery<any>({\n    queryKey: [\"/api/companies\", user?.companyId],\n    enabled: !!user?.companyId,\n    retry: false,\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (profileData: any) => {\n      const response = await apiRequest(\"PUT\", `/api/users/${user?.id}`, profileData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setIsEditing(false);\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSave = () => {\n    updateProfileMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      name: user?.name || \"\",\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n      role: user?.role || \"\",\n      companyId: user?.companyId?.toString() || \"\",\n    });\n    setIsEditing(false);\n  };\n\n  const getRoleBadge = (role: string) => {\n    switch (role?.toLowerCase()) {\n      case 'super admin':\n        return <Badge className=\"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\">Super Admin</Badge>;\n      case 'company admin':\n        return <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">Company Admin</Badge>;\n      case 'hr':\n        return <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">HR</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{role}</Badge>;\n    }\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"page-title\">Profile</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage your account settings and preferences</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Profile Overview */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex flex-col items-center text-center\">\n                  <div className=\"relative mb-4\">\n                    <Avatar className=\"w-24 h-24\">\n                      <AvatarImage src={user?.profileImageUrl || undefined} alt={user?.name || \"\"} />\n                      <AvatarFallback className=\"text-2xl\">\n                        {user?.name?.charAt(0) || user?.firstName?.charAt(0) || user?.email?.charAt(0) || \"U\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    <Button\n                      size=\"icon\"\n                      variant=\"secondary\"\n                      className=\"absolute bottom-0 right-0 h-8 w-8 rounded-full\"\n                      data-testid=\"change-avatar-button\"\n                    >\n                      <Camera className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  <h2 className=\"text-xl font-semibold text-foreground mb-1\" data-testid=\"user-name\">\n                    {user?.name || `${user?.firstName || \"\"} ${user?.lastName || \"\"}`.trim() || \"Unknown User\"}\n                  </h2>\n                  \n                  <p className=\"text-muted-foreground mb-3\" data-testid=\"user-email\">\n                    {user?.email}\n                  </p>\n                  \n                  <div className=\"mb-4\">\n                    {getRoleBadge(user?.role || \"\")}\n                  </div>\n                  \n                  {company && (\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <Building className=\"h-4 w-4 mr-2\" />\n                      <span data-testid=\"company-name\">{company.companyName}</span>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Profile Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"flex items-center\">\n                  <User className=\"h-5 w-5 mr-2\" />\n                  Personal Information\n                </CardTitle>\n                {!isEditing ? (\n                  <Button \n                    onClick={() => setIsEditing(true)}\n                    data-testid=\"edit-profile-button\"\n                  >\n                    Edit Profile\n                  </Button>\n                ) : (\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      onClick={handleSave} \n                      disabled={updateProfileMutation.isPending}\n                      data-testid=\"save-profile-button\"\n                    >\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      onClick={handleCancel}\n                      data-testid=\"cancel-edit-button\"\n                    >\n                      <X className=\"h-4 w-4 mr-2\" />\n                      Cancel\n                    </Button>\n                  </div>\n                )}\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    {isEditing ? (\n                      <Input\n                        id=\"firstName\"\n                        value={formData.firstName}\n                        onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                        data-testid=\"first-name-input\"\n                      />\n                    ) : (\n                      <p className=\"text-sm text-foreground p-2 bg-muted/50 rounded\" data-testid=\"first-name-display\">\n                        {user?.firstName || \"Not specified\"}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    {isEditing ? (\n                      <Input\n                        id=\"lastName\"\n                        value={formData.lastName}\n                        onChange={(e) => handleInputChange(\"lastName\", e.target.value)}\n                        data-testid=\"last-name-input\"\n                      />\n                    ) : (\n                      <p className=\"text-sm text-foreground p-2 bg-muted/50 rounded\" data-testid=\"last-name-display\">\n                        {user?.lastName || \"Not specified\"}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"displayName\">Display Name</Label>\n                  {isEditing ? (\n                    <Input\n                      id=\"displayName\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                      data-testid=\"display-name-input\"\n                    />\n                  ) : (\n                    <p className=\"text-sm text-foreground p-2 bg-muted/50 rounded\" data-testid=\"display-name-display\">\n                      {user?.name || \"Not specified\"}\n                    </p>\n                  )}\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium text-foreground flex items-center\">\n                    <Mail className=\"h-5 w-5 mr-2\" />\n                    Contact Information\n                  </h3>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <p className=\"text-sm text-foreground p-2 bg-muted/50 rounded\" data-testid=\"email-display\">\n                      {user?.email}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Email cannot be changed. Contact your administrator if needed.\n                    </p>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium text-foreground flex items-center\">\n                    <Shield className=\"h-5 w-5 mr-2\" />\n                    Role & Permissions\n                  </h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Role</Label>\n                      <div className=\"p-2\" data-testid=\"role-display\">\n                        {getRoleBadge(user?.role || \"\")}\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label>Company</Label>\n                      <p className=\"text-sm text-foreground p-2 bg-muted/50 rounded\" data-testid=\"company-display\">\n                        {company?.companyName || \"Not specified\"}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-xs text-muted-foreground\">\n                    Role and company assignments are managed by administrators.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Account Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Account Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Account Status</h4>\n                    <p className=\"text-sm text-muted-foreground\">Your account is currently active</p>\n                  </div>\n                  <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                    Active\n                  </Badge>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Two-Factor Authentication</h4>\n                    <p className=\"text-sm text-muted-foreground\">Add an extra layer of security</p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"enable-2fa-button\">\n                    Enable 2FA\n                  </Button>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Password</h4>\n                    <p className=\"text-sm text-muted-foreground\">Last changed 30 days ago</p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"change-password-button\">\n                    Change Password\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14361},"client/src/pages/Signup.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Brain, CheckCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst signupSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n  role: z.enum([\"Super Admin\", \"Company Admin\", \"HR\"], {\n    required_error: \"Please select a role\",\n  }),\n  company: z.string().optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n}).refine((data) => {\n  // Company is required for non-Super Admin roles\n  if (data.role !== \"Super Admin\" && !data.company) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Company is required for Company Admin and HR roles\",\n  path: [\"company\"],\n});\n\ntype SignupFormData = z.infer<typeof signupSchema>;\n\nexport default function Signup() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const { toast } = useToast();\n  \n  const form = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      role: undefined,\n      company: \"\",\n    },\n  });\n\n  const selectedRole = form.watch(\"role\");\n  const showCompanyField = selectedRole && selectedRole !== \"Super Admin\";\n\n  const onSubmit = async (data: SignupFormData) => {\n    setIsLoading(true);\n    try {\n      await apiRequest(\"POST\", \"/api/auth/signup\", {\n        name: data.name,\n        email: data.email,\n        password: data.password,\n        role: data.role,\n        company: data.company,\n      });\n      \n      setIsSuccess(true);\n      toast({\n        title: \"Account created successfully\",\n        description: \"You can now sign in with your credentials\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Sign up failed\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (isSuccess) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-primary/10 to-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"text-green-600 dark:text-green-400\" size={32} />\n            </div>\n            <CardTitle className=\"text-2xl text-green-600 dark:text-green-400\">Account Created!</CardTitle>\n            <CardDescription>Your account has been successfully created.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <p className=\"text-muted-foreground\">\n              You can now sign in with your credentials to access your dashboard.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <Button asChild className=\"flex-1\">\n                <Link href=\"/login\">\n                  <span>Sign In</span>\n                </Link>\n              </Button>\n              <Button variant=\"outline\" asChild className=\"flex-1\">\n                <Link href=\"/\">\n                  <span>Home</span>\n                </Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-primary/10 to-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <Brain className=\"text-primary-foreground\" size={32} />\n          </div>\n          <CardTitle className=\"text-2xl\">Smart Hiring</CardTitle>\n          <CardDescription>Create your account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            {/* Name */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                placeholder=\"Enter your full name\"\n                {...form.register(\"name\")}\n                data-testid=\"name-input\"\n              />\n              {form.formState.errors.name && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.name.message}\n                </p>\n              )}\n            </div>\n\n            {/* Email */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                {...form.register(\"email\")}\n                data-testid=\"email-input\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            {/* Role */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Role</Label>\n              <Select\n                value={form.watch(\"role\") || \"\"}\n                onValueChange={(value) => form.setValue(\"role\", value as any)}\n              >\n                <SelectTrigger data-testid=\"role-select\">\n                  <SelectValue placeholder=\"Select your role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Super Admin\">Super Admin</SelectItem>\n                  <SelectItem value=\"Company Admin\">Company Admin</SelectItem>\n                  <SelectItem value=\"HR\">HR</SelectItem>\n                </SelectContent>\n              </Select>\n              {form.formState.errors.role && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.role.message}\n                </p>\n              )}\n            </div>\n\n            {/* Company (conditional) */}\n            {showCompanyField && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"company\">Company</Label>\n                <Input\n                  id=\"company\"\n                  placeholder=\"Enter your company name\"\n                  {...form.register(\"company\")}\n                  data-testid=\"company-input\"\n                />\n                {form.formState.errors.company && (\n                  <p className=\"text-sm text-destructive\">\n                    {form.formState.errors.company.message}\n                  </p>\n                )}\n              </div>\n            )}\n\n            {/* Password */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Create Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Create a password (min 6 characters)\"\n                {...form.register(\"password\")}\n                data-testid=\"password-input\"\n              />\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.password.message}\n                </p>\n              )}\n            </div>\n\n            {/* Confirm Password */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n              <Input\n                id=\"confirmPassword\"\n                type=\"password\"\n                placeholder=\"Confirm your password\"\n                {...form.register(\"confirmPassword\")}\n                data-testid=\"confirm-password-input\"\n              />\n              {form.formState.errors.confirmPassword && (\n                <p className=\"text-sm text-destructive\">\n                  {form.formState.errors.confirmPassword.message}\n                </p>\n              )}\n            </div>\n\n            {/* Submit Button */}\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"signup-button\"\n            >\n              {isLoading ? \"Creating Account...\" : \"Create Account\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center text-sm\">\n            <p className=\"text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\">\n                <span className=\"text-primary hover:underline cursor-pointer\">\n                  Sign in\n                </span>\n              </Link>\n            </p>\n            <p className=\"mt-2\">\n              <Link href=\"/\">\n                <span className=\"text-primary hover:underline cursor-pointer\">\n                  Back to Home\n                </span>\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9802},"client/src/pages/Upload.tsx":{"content":"\"use client\";\n\nimport { useState, ChangeEvent } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Upload as UploadIcon,\n  FileText,\n  Brain,\n  CheckCircle,\n  AlertCircle,\n  Users,\n  Loader2,\n  MessageSquare,\n  X,\n} from \"lucide-react\";\n\ninterface ExtractedCandidate {\n  id: string;\n  name: string;\n  email: string;\n  skills: string[];\n  experience: {\n    years: number;\n    projects: {\n      name: string;\n      skills: string[];\n      years: number;\n    }[];\n  };\n  summary: string;\n}\n\ninterface JobMatch {\n  candidateId: string;\n  name: string;\n  email: string;\n  matchPercentage: number;\n  \"percentage match summary\": string;\n  \"Strengths:\"?: {\n    reason: string;\n    points: number;\n    \"experience list\": string[];\n  }[];\n  \"Areas for Improvement:\"?: {\n    reason: string;\n    points: number;\n    gaps: string;\n  }[];\n}\n\ninterface InterviewQuestions {\n  technical: string[];\n  behavioral: string[];\n  jobSpecific: string[];\n}\n\ntype UploadStep = \"upload\" | \"extracted\" | \"matched\" | \"added\";\n\nexport default function Upload() {\n  const [currentStep, setCurrentStep] = useState<UploadStep>(\"upload\");\n  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);\n  const [extractedCandidates, setExtractedCandidates] = useState<ExtractedCandidate[]>([]);\n  const [selectedJobId, setSelectedJobId] = useState<string>(\"\");\n  const [matchResults, setMatchResults] = useState<JobMatch[]>([]);\n  const [selectedCandidateIds, setSelectedCandidateIds] = useState<Set<string>>(new Set());\n  const [showInterviewQuestions, setShowInterviewQuestions] = useState<{[key: string]: InterviewQuestions}>({});\n  const [isQuestionsDialogOpen, setIsQuestionsDialogOpen] = useState(false);\n  const [selectedCandidateForQuestions, setSelectedCandidateForQuestions] = useState<string | null>(null);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch available jobs\n  const { data: jobs = [] } = useQuery<any[]>({\n    queryKey: [\"/api/jobs\"],\n  });\n\n  // Step 1: Upload and extract data\n  const uploadMutation = useMutation({\n    mutationFn: async (files: File[]) => {\n      const formData = new FormData();\n      files.forEach((file) => {\n        formData.append(\"resumes\", file);\n      });\n\n      return apiRequest(\"/api/upload/resumes\", {\n        method: \"POST\",\n        body: formData,\n      });\n    },\n    onSuccess: (data) => {\n      const candidatesWithIds = data.candidates.map((candidate: any, index: number) => ({\n        ...candidate,\n        id: candidate.id || `temp_${Date.now()}_${index}`,\n      }));\n      \n      setExtractedCandidates(candidatesWithIds);\n      setCurrentStep(\"extracted\");\n      \n      toast({\n        title: \"Success\",\n        description: `Extracted data from ${candidatesWithIds.length} resumes`,\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Upload error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process resumes. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Step 2: Analyze and match candidates\n  const matchMutation = useMutation({\n    mutationFn: async ({\n      candidates,\n      jobId,\n    }: {\n      candidates: ExtractedCandidate[];\n      jobId: string;\n    }) => {\n      return apiRequest(\"/api/ai/match-candidates\", {\n        method: \"POST\",\n        body: { candidates, jobId },\n      });\n    },\n    onSuccess: (data) => {\n      const matchesWithIds = data.matches.map((match: any, index: number) => ({\n        ...match,\n        candidateId: extractedCandidates[index]?.id || `temp_${Date.now()}_${index}`,\n      }));\n      \n      setMatchResults(matchesWithIds);\n      setCurrentStep(\"matched\");\n      \n      toast({\n        title: \"Success\",\n        description: `Matched ${matchesWithIds.length} candidates against job requirements`,\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Match error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to match candidates\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Interview questions generation\n  const questionsMutation = useMutation({\n    mutationFn: async (candidateId: string) => {\n      const candidate = extractedCandidates.find(c => c.id === candidateId);\n      if (!candidate) {\n        throw new Error(\"Candidate not found\");\n      }\n\n      return apiRequest(\"/api/ai/generate-questions\", {\n        method: \"POST\",\n        body: { candidate, jobId: parseInt(selectedJobId) },\n      });\n    },\n    onSuccess: (data, candidateId) => {\n      setShowInterviewQuestions(prev => ({\n        ...prev,\n        [candidateId]: data.questions,\n      }));\n      setSelectedCandidateForQuestions(candidateId);\n      setIsQuestionsDialogOpen(true);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate interview questions\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Step 3: Add selected candidates to database\n  const addCandidatesMutation = useMutation({\n    mutationFn: async (selectedIds: string[]) => {\n      const selectedData = selectedIds.map(id => {\n        const candidate = extractedCandidates.find(c => c.id === id);\n        const match = matchResults.find(m => m.candidateId === id);\n        \n        if (!candidate || !match) {\n          throw new Error(`Missing data for candidate ${id}`);\n        }\n\n        return {\n          id: candidate.id,\n          name: candidate.name,\n          email: candidate.email,\n          skills: candidate.skills,\n          experience: candidate.experience,\n          matchPercentage: match.matchPercentage,\n        };\n      });\n\n      return apiRequest(\"/api/candidates/add\", {\n        method: \"POST\",\n        body: { candidates: selectedData, jobId: selectedJobId },\n      });\n    },\n    onSuccess: () => {\n      setCurrentStep(\"added\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/candidates\"] });\n      toast({\n        title: \"Success\",\n        description: \"Selected candidates have been added to the system\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Add candidates error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add candidates\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Event handlers\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSelectedFiles(e.target.files);\n  };\n\n  const handleUploadAndExtract = () => {\n    if (selectedFiles && selectedFiles.length > 0) {\n      const files = Array.from(selectedFiles);\n      uploadMutation.mutate(files);\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"Please select files to upload\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleAnalyzeAndMatch = () => {\n    if (!selectedJobId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a job role first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (extractedCandidates.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"No candidates to analyze\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    matchMutation.mutate({\n      candidates: extractedCandidates,\n      jobId: selectedJobId,\n    });\n  };\n\n  const handleAddSelected = () => {\n    if (selectedCandidateIds.size === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please select at least one candidate\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addCandidatesMutation.mutate(Array.from(selectedCandidateIds));\n  };\n\n  const toggleCandidateSelection = (candidateId: string) => {\n    const newSelection = new Set(selectedCandidateIds);\n    if (newSelection.has(candidateId)) {\n      newSelection.delete(candidateId);\n    } else {\n      newSelection.add(candidateId);\n    }\n    setSelectedCandidateIds(newSelection);\n  };\n\n  const resetFlow = () => {\n    setCurrentStep(\"upload\");\n    setSelectedFiles(null);\n    setExtractedCandidates([]);\n    setSelectedJobId(\"\");\n    setMatchResults([]);\n    setSelectedCandidateIds(new Set());\n    setShowInterviewQuestions({});\n    setIsQuestionsDialogOpen(false);\n    setSelectedCandidateForQuestions(null);\n  };\n\n  const handleGenerateQuestions = (candidateId: string) => {\n    if (!selectedJobId) {\n      toast({\n        title: \"Error\",\n        description: \"Job role is required to generate questions\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    questionsMutation.mutate(candidateId);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-bold mb-2\">Resume Upload & Analysis</h1>\n        <p className=\"text-muted-foreground\">\n          Upload resumes, analyze candidate data, and match with job requirements\n        </p>\n      </div>\n\n      {/* Progress Steps */}\n      <div className=\"flex justify-center space-x-4 mb-8\">\n        <div className={`flex items-center space-x-2 ${currentStep === \"upload\" ? \"text-primary\" : currentStep === \"extracted\" || currentStep === \"matched\" || currentStep === \"added\" ? \"text-green-600\" : \"text-muted-foreground\"}`}>\n          <UploadIcon className=\"w-5 h-5\" />\n          <span>Upload & Extract</span>\n        </div>\n        <div className={`flex items-center space-x-2 ${currentStep === \"extracted\" ? \"text-primary\" : currentStep === \"matched\" || currentStep === \"added\" ? \"text-green-600\" : \"text-muted-foreground\"}`}>\n          <Brain className=\"w-5 h-5\" />\n          <span>Analyze & Match</span>\n        </div>\n        <div className={`flex items-center space-x-2 ${currentStep === \"matched\" ? \"text-primary\" : currentStep === \"added\" ? \"text-green-600\" : \"text-muted-foreground\"}`}>\n          <Users className=\"w-5 h-5\" />\n          <span>Select & Add</span>\n        </div>\n      </div>\n\n      {/* Step 1: Upload and Extract */}\n      {currentStep === \"upload\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <UploadIcon className=\"w-5 h-5\" />\n              Step 1: Upload Resume Files\n            </CardTitle>\n            <CardDescription>\n              Select PDF or DOCX resume files to extract candidate data\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <Input\n                  type=\"file\"\n                  multiple\n                  accept=\".pdf,.docx,.txt\"\n                  onChange={handleFileChange}\n                  className=\"mb-4\"\n                  data-testid=\"input-resume-files\"\n                />\n                {selectedFiles && (\n                  <div className=\"text-sm text-muted-foreground\">\n                    Selected {selectedFiles.length} file(s)\n                  </div>\n                )}\n              </div>\n              <Button\n                onClick={handleUploadAndExtract}\n                disabled={uploadMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-upload-extract\"\n              >\n                {uploadMutation.isPending && (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                )}\n                Upload and Extract Data\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 2: Show Extracted Candidates */}\n      {currentStep === \"extracted\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"w-5 h-5\" />\n              Step 2: Extracted Candidates\n            </CardTitle>\n            <CardDescription>\n              Review extracted candidate data and select job role for analysis\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Job Selection */}\n              <div className=\"flex gap-4 items-end\">\n                <div className=\"flex-1\">\n                  <label className=\"text-sm font-medium mb-2 block\">Select Job Role</label>\n                  <Select value={selectedJobId} onValueChange={setSelectedJobId}>\n                    <SelectTrigger data-testid=\"select-job-role\">\n                      <SelectValue placeholder=\"Choose a job role...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {jobs.map((job: any) => (\n                        <SelectItem key={job.id} value={job.id.toString()}>\n                          {job.jobTitle}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Button\n                  onClick={handleAnalyzeAndMatch}\n                  disabled={matchMutation.isPending || !selectedJobId}\n                  data-testid=\"button-analyze-match\"\n                >\n                  {matchMutation.isPending && (\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  )}\n                  Analyze & Percentage Match\n                </Button>\n              </div>\n\n              {/* Candidates Table */}\n              <div className=\"border rounded-lg overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-[150px]\">Name</TableHead>\n                      <TableHead className=\"w-[200px]\">Email</TableHead>\n                      <TableHead className=\"w-[300px]\">Skills</TableHead>\n                      <TableHead className=\"w-[250px]\">Experience</TableHead>\n                      <TableHead className=\"w-[300px]\">Summary</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {extractedCandidates.map((candidate) => (\n                      <TableRow key={candidate.id}>\n                        <TableCell className=\"font-medium\">{candidate.name}</TableCell>\n                        <TableCell className=\"text-sm\">{candidate.email}</TableCell>\n                        <TableCell>\n                          <div className=\"flex flex-wrap gap-1 max-w-[280px]\">\n                            {candidate.skills.map((skill, index) => (\n                              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                {skill}\n                              </Badge>\n                            ))}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          <div className=\"space-y-1\">\n                            <div className=\"font-medium\">{candidate.experience.years} years total</div>\n                            {candidate.experience.projects.slice(0, 2).map((project, index) => (\n                              <div key={index} className=\"text-xs text-muted-foreground\">\n                                • {project.name} ({project.years}yr)\n                              </div>\n                            ))}\n                            {candidate.experience.projects.length > 2 && (\n                              <div className=\"text-xs text-muted-foreground\">\n                                +{candidate.experience.projects.length - 2} more projects\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-sm max-w-[280px]\">\n                          <div className=\"line-clamp-4\">\n                            {candidate.summary}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 3: Show Matched Results */}\n      {currentStep === \"matched\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Brain className=\"w-5 h-5\" />\n              Step 3: Candidate Matches\n            </CardTitle>\n            <CardDescription>\n              Select candidates to add to the system based on their match scores\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {selectedCandidateIds.size} of {matchResults.length} candidates selected\n                </div>\n                <Button\n                  onClick={handleAddSelected}\n                  disabled={addCandidatesMutation.isPending || selectedCandidateIds.size === 0}\n                  data-testid=\"button-add-selected\"\n                >\n                  {addCandidatesMutation.isPending && (\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  )}\n                  Add Selected Candidates\n                </Button>\n              </div>\n\n              <div className=\"space-y-4\">\n                {matchResults.map((match) => {\n                  const candidate = extractedCandidates.find(c => c.id === match.candidateId);\n                  if (!candidate) return null;\n\n                  return (\n                    <Card key={match.candidateId} className=\"border\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Checkbox\n                              checked={selectedCandidateIds.has(match.candidateId)}\n                              onCheckedChange={() => toggleCandidateSelection(match.candidateId)}\n                              data-testid={`checkbox-candidate-${match.candidateId}`}\n                            />\n                            <div>\n                              <h3 className=\"font-semibold\">{candidate.name}</h3>\n                              <p className=\"text-sm text-muted-foreground\">{candidate.email}</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge\n                              variant={match.matchPercentage >= 70 ? \"default\" : match.matchPercentage >= 50 ? \"secondary\" : \"destructive\"}\n                            >\n                              {match.matchPercentage}% Match\n                            </Badge>\n                          </div>\n                        </div>\n                        \n                        <div className=\"mt-4 space-y-2\">\n                          <p className=\"text-sm\">{match[\"percentage match summary\"]}</p>\n                          \n                          {match[\"Strengths:\"] && match[\"Strengths:\"].length > 0 && (\n                            <div>\n                              <h4 className=\"font-medium text-sm text-green-600 mb-1\">Strengths:</h4>\n                              {match[\"Strengths:\"].map((strength, index) => (\n                                <div key={index} className=\"text-xs pl-2 border-l-2 border-green-200\">\n                                  <strong>{strength.reason}</strong> (+{strength.points} points)\n                                  <div className=\"text-muted-foreground\">\n                                    Technologies: {strength[\"experience list\"].join(\", \")}\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                          \n                          {match[\"Areas for Improvement:\"] && match[\"Areas for Improvement:\"].length > 0 && (\n                            <div>\n                              <h4 className=\"font-medium text-sm text-red-600 mb-1\">Areas for Improvement:</h4>\n                              {match[\"Areas for Improvement:\"].map((area, index) => (\n                                <div key={index} className=\"text-xs pl-2 border-l-2 border-red-200\">\n                                  <strong>{area.reason}</strong> ({area.points} points): {area.gaps}\n                                </div>\n                              ))}\n                            </div>\n                          )}\n\n                          {/* Interview Questions Link */}\n                          <div className=\"pt-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleGenerateQuestions(match.candidateId)}\n                              disabled={questionsMutation.isPending}\n                              className=\"text-blue-600 hover:text-blue-800\"\n                            >\n                              {questionsMutation.isPending ? (\n                                <Loader2 className=\"w-3 h-3 mr-1 animate-spin\" />\n                              ) : (\n                                <MessageSquare className=\"w-3 h-3 mr-1\" />\n                              )}\n                              Interview Questions\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 4: Success */}\n      {currentStep === \"added\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              Candidates Added Successfully\n            </CardTitle>\n            <CardDescription>\n              The selected candidates have been added to your candidate database\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedCandidateIds.size} candidates were successfully added to the system\n              </p>\n              <Button onClick={resetFlow} variant=\"outline\" data-testid=\"button-upload-more\">\n                Upload More Resumes\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Interview Questions Dialog */}\n      <Dialog open={isQuestionsDialogOpen} onOpenChange={setIsQuestionsDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <MessageSquare className=\"w-5 h-5\" />\n              Interview Questions\n            </DialogTitle>\n            <DialogDescription>\n              AI-generated questions based on candidate profile and job requirements\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedCandidateForQuestions && showInterviewQuestions[selectedCandidateForQuestions] && (\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"font-semibold text-sm mb-3 text-blue-600\">Technical Questions</h3>\n                <div className=\"space-y-2\">\n                  {showInterviewQuestions[selectedCandidateForQuestions].technical.map((question, index) => (\n                    <div key={index} className=\"p-3 bg-blue-50 dark:bg-blue-950 rounded-lg text-sm\">\n                      <span className=\"font-medium text-blue-800 dark:text-blue-200\">Q{index + 1}:</span> {question}\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold text-sm mb-3 text-green-600\">Behavioral Questions</h3>\n                <div className=\"space-y-2\">\n                  {showInterviewQuestions[selectedCandidateForQuestions].behavioral.map((question, index) => (\n                    <div key={index} className=\"p-3 bg-green-50 dark:bg-green-950 rounded-lg text-sm\">\n                      <span className=\"font-medium text-green-800 dark:text-green-200\">Q{index + 1}:</span> {question}\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold text-sm mb-3 text-purple-600\">Job-Specific Questions</h3>\n                <div className=\"space-y-2\">\n                  {showInterviewQuestions[selectedCandidateForQuestions].jobSpecific.map((question, index) => (\n                    <div key={index} className=\"p-3 bg-purple-50 dark:bg-purple-950 rounded-lg text-sm\">\n                      <span className=\"font-medium text-purple-800 dark:text-purple-200\">Q{index + 1}:</span> {question}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":26156},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}